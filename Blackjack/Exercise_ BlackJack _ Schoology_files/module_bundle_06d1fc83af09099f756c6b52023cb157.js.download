Drupal.behaviors.sAttachment = function(context){
  $('.attachments-video-thumbnails-play:not(.sAttachment-processed)', context).addClass('sAttachment-processed').each(function(){
      var btn = $(this);
      btn.bind('click', function(){
        var wrapper = btn.parents(".attachments-video");
        var video = $(".video-video", wrapper);
        wrapper.after(video);
        video.show();
        wrapper.hide();
        thePopup = Popups.activePopup();
        if(thePopup != null){
			Popups.resizeAndCenter(thePopup);
        }
        return false;
      });
  });
  
  $('.embed-cover:not(.sAttachment-processed)', context).addClass('sAttachment-processed').each(function(){
    $(this).click(function(){
      var cover = $(this),
          embedContentObj = cover.siblings('.embed-content:first');
      cover.hide();
      cover.siblings('.embed-title').hide();

      // iframes get wrapped in comments to prevent autoloading
      if(embedContentObj.length){
        var embedNode = embedContentObj.get(0),
            embedContentHTML = null;
        embedContentObj.show();
        $.each(embedNode.childNodes, function(k, node){
          // 8 is COMMENT_NODE (the constants are not properly named as document.COMMENT_NODE in every browser)
          if(node.nodeType == 8){
            embedContentHTML = node.nodeValue;
          }
        });
        if(embedContentHTML){
          embedContentObj.html(embedContentHTML);
        }
      }
    });
  });
  
  $('.attachments-link:not(.sAttachment-processed)', context).addClass('sAttachment-processed').each(function(){
      var link = $(this);
      var intPopup = $('.attachment-link-popup', link);
      link.bind('mouseenter', function(){
	      if(intPopup.length)
	    	  intPopup.show();
      }).bind('mouseleave', function(){
    	  if(intPopup.length)
    	    intPopup.hide();
      });
      //hide the popup if the user goes from the tip arrow in
      intPopup.bind('mouseenter', function(){
    	 $(this).hide(); 
      });
  });
  
}

;Drupal.behaviors.sCommonMediaFileIframeUseRelativeUrl = function(context) {
  
  // Matches paths such as '/media/ifr/1026136881', '/media/ifr/1026132513', etc. in fully-qualified URLs only (SGY-23086)
  var $mediaFileRe = /^\/?media\/ifr\/\d+$/;

  // Matches paths such as '/media/ifr_ext?url=https%3A%2F%2Fiaabccontent.org%2Fdocs%2Fcourses%2Fvideos%2FDefensiveHandling-web.mp4' in fully-qualified URLs only (SGY-25009)
  var $mediaFileExtRe = /^\/?media\/ifr_ext$/;

  $("#main iframe:not(.sCommonMediaFileIframeUseRelativeUrl-processed), .s-page-container iframe:not(.sCommonMediaFileIframeUseRelativeUrl-processed)," +
    ".template-fields iframe:not(.sCommonMediaFileIframeUseRelativeUrl-processed)", context).addClass('sCommonMediaFileIframeUseRelativeUrl-processed').each(function(){

    // If the source of this iframe appears to be a Schoology media file, make the source URL relative.
    var iframeObj = $(this);
    var iframeSrc = iframeObj.attr('src');

    // Create an element to leverage URL parsing (https://gist.github.com/jlong/2428561)
    var parser = document.createElement('a');
    parser.href = iframeSrc;

    var pathName = parser.pathname;
    var $match = $mediaFileRe.exec(pathName);
    if (!$match){
      $match = $mediaFileExtRe.exec(pathName);
    }
    
    if($match){
      // In IE, the leading slash is not included in pathname, so we need to prepend
      // SGY-23250
      if(pathName[0] !== '/'){
        pathName = '/' + pathName;
      }

      // Add search string if present SGY-25009
      if(parser.search){
        pathName += parser.search;
      }
      iframeObj.attr('src', pathName);
    }
  });
};Drupal.behaviors.s_user = function(context){

    $('#s-user-custom-notifications-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        //handle select all functionality in custom notification form
        var form = $(this);
        var selectAll = $('.select-all', form);
        selectAll.click(function(){
            var checked = $(this).is(':checked');
            $('.realm-setting', form).each(function(){
                $(this).prop('checked', checked);
            });
        });

        $('.edit-select-all-wrapper', form).click(function(){
            $('input', this).click();
        });


        $('.realm-setting').each(function(){
            var realmSetting = $(this);
            realmSetting.change(function(){
                if(!realmSetting.attr('checked') && selectAll.attr('checked')){
                    selectAll.prop('checked', false);
                }
            });
        });

        $('.cancel-btn', form).click(function(e){
            //reset the value of the correspoding select form in the notifications setting to its original value
            var setting = $('.setting-name', form).val();
            var selectVal = $('.original-setting', form).html();
            $('select[name=' + setting + ']').selectmenu('value', selectVal);
            var popup = Popups.activePopup();
            if(popup != null){
                popup.close();
            }
            e.preventDefault();
        });

    });

    $('.notifications-header:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        // handles reset to default for notification settings
        if(Drupal.settings.s_user != 'undefined' && typeof Drupal.settings.s_user.notif_defaults != 'undefined'){
            var setting = Drupal.settings.s_user;
            $('.reset-default').click(function(){
                $('select.notif-setting-select').each(function(){
                    var name = $(this).attr('name');
                    if(typeof setting.notif_defaults[name] != 'undefined'){
                        $(this).selectmenu('value', setting.notif_defaults[name]);
                    }
                });
            });
        }
    });

    $('#s-user-set-notifications-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        //open popup for for when "custom" is selected
        $('select.notif-setting-select').each(function(){
            var select = $(this);
            select.selectmenu({
                style: 'dropdown'
            });
            select.change(function(){
                if(select.val() == '2'){
                    var href = '/user/custom_notification/' + select.attr('name');
                    Popups.openPath(this, {
                        href : href,
                        ajaxForm : false,
                        extraClass : 'popups-custom-notification popups-medium'
                    }, window);
                }
            });
        });
    });

    $('#s-user-invite-colleague-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        ZeroClipboard.setMoviePath( '/sites/all/misc/zeroclipboard/zeroclipboard.swf' );
        var clip = new ZeroClipboard.Client();
        clip.setHandCursor( true );
        var text = $('#invite_link #url').html();
        text = text.replace(/&amp;/g, '&');
        clip.setText(text);
        var html = '<span class="zclipboard" style="position:absolute;">' + clip.getHTML( $('#invite_link').outerWidth(), $('#invite_link').outerHeight() ) + '</span>';
        $('.popups-body').append(html);
        repositionZClipboard();

        clip.addEventListener( 'complete', function(client, text) {
            if($('.copied-wrapper').length == 0){
                $('.popups-body').append('<span class="copied-wrapper">Link copied to your clipboard</span>');
            }
            else{
                $('.copied-wrapper').show();
            }
            setTimeout(function(){
                $('.copied-wrapper').fadeOut(400, function(){
                    sPopupsResizeCenter();
                });
            }, 2500);
            sPopupsResizeCenter();
        });

        $('.addresses').focus(function(){
            if($(this).hasClass('pre-fill')){
                $(this).empty();
                $(this).removeClass('pre-fill');
            }
            repositionZClipboard();
        });

        if($('#s-user-invite-colleague-form').hasClass('emails-sent'))
        {
            $('#s-user-invite-colleague-form').removeClass('emails-sent');
            $('.popup-invite').addClass('emails-sent');
            sPopupsResizeCenter();
        }

        $('#s-user-invite-colleagues-invite-by-email').bind('click',
            function(e) {
                $('.popup-invite').addClass('sending-emails');
                $('#s-user-invite-colleagues-invite-choices,#s-user-invite-colleagues-click-to-copy-link,#s-user-invite-colleagues-click-to-copy-title').fadeOut(300,
                    function() {
                        $('#edit-emails,.s-user-invite-colleagues-invite-by-email-buttons').fadeIn(300,
                            function() {
                                repositionZClipboard();
                            }
                            );
                    }
                    );
                e.preventDefault();
            }
            );

        $('#s-user-invite-colleagues-invite-by-email-cancel').unbind('click');
        $('#s-user-invite-colleagues-invite-by-email-cancel').bind('click',
            function(e) {
                $('.popup-invite').removeClass('sending-emails');
                $('#edit-emails,.s-user-invite-colleagues-invite-by-email-buttons').fadeOut(300,
                    function() {
                        $('#s-user-invite-colleagues-invite-choices,#s-user-invite-colleagues-click-to-copy-link,#s-user-invite-colleagues-click-to-copy-title').fadeIn(300,
                            function() {
                                repositionZClipboard();
                            }
                            );
                    }
                    );
                e.preventDefault();
            }
            );

        $("#s-user-invite-colleagues-fb-button,#s-user-invite-colleagues-twitter-button").click(
            function(e) {
              window.open($(this).attr('realhref'), 'popup', 'width=650,height=380', false);
              e.preventDefault();
              return false;
            }
        );
    });

    $("a.show-code").click(function(){
        var value = $(this).attr('id');
        var value = value.split("-");
        var html = '<div class="formatted-code">Code: '+value[1]+'</div>';
        $.prompt(html);
        return false;
    });

    $("input#action-select-all").click(function(){
        var parent = $(this);
        $("#s-user-manage-activation-form table input:checkbox").each(function(){
            if($(this).attr('checked')){
                $(parent).prop('checked', false);
                $(this).prop('checked', false);
            }
            else{
                $(parent).prop('checked', true);
                $(this).prop('checked', true);
            }
        });
    });

    $('#s-user-edit-calendar-feed-settings-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        $('#webcal-addr', $(this)).focus(function(){
            document.getElementById('webcal-addr').select();
        }).mouseup(function(e){
            e.preventDefault();
        });

    });

    $('#s-user-profile-editor-profile-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
        $('textarea', $(this)).elastic();

        var learnerWrapper = $('.learner-style-wrappper');
        var defaultLearnerRadioBtnWrapper = $('#edit-profile-about-learner-style-0-wrapper', learnerWrapper);
        var defaultLeanerRadioBtn = $('input[type=radio]', defaultLearnerRadioBtnWrapper);
        defaultLearnerRadioBtnWrapper.hide();
        sCommonFormRadioGroup(learnerWrapper, defaultLeanerRadioBtn);
    });

    $('#s-user-personal-account-settings-form:not(.sUser-processed)').addClass('sUser-processed').each(function(){
      var form  = $(this);
      $('.timezone-select-time .timezone-use-list', form).bind('click', function(){
        $(this).parent().hide();
        $('.timezone-select-timezone', form).show();
        $('#edit-timezone-select-type', form).val('timezone');
      });
      $('.timezone-select-timezone .timezone-use-time', form).bind('click', function(){
        $(this).parent().hide();
        $('.timezone-select-time', form).show();
        $('#edit-timezone-select-type', form).val('time');
      });

      //only display the show preferred name dropdown if a preferred name has been set
      $('#edit-user-name-first-preferred').on('keydown paste input', function(e){
        var $textbox = $(this);
        var hasPreferredName = !!$textbox.val().length;
        var $namePreferredWrapper = $textbox.closest('.name-first-preferred-wrapper');
        var $usePreferredName = $('.use-name-first-preferred-wrapper');
        var usePreferredNameVisible = !$usePreferredName.hasClass('hidden');
        if(hasPreferredName != usePreferredNameVisible){
          $usePreferredName.toggleClass('hidden', usePreferredNameVisible);
          $namePreferredWrapper.toggleClass('has-preferred-first-name', hasPreferredName);
        }
      });
    });

    $('.s-js-name-title-wrapper:not(.sUser-processed)', context).addClass('sUser-processed').each(function(){
      var titleWrapper = $(this),
          customField = $('.s-js-name-title-custom', titleWrapper);
      $('.s-js-name-title-select', titleWrapper).change(function(e){
        if($(this).val() == 'custom'){
          titleWrapper.addClass('s-js-name-title-custom-enabled');
        }
        else{
          titleWrapper.removeClass('s-js-name-title-custom-enabled');
          customField.val('');
        }
      }).triggerHandler('change');
    });

    //performs logout when an account is deleted
    if($('.logout-exec').text() == '1'){
        var url = location.href;
        index = url.indexOf('settings/');

        var logoutHref = '/logout?';
        if (Drupal.settings.s_common.hasOwnProperty('logout_token')){
            logoutHref += 'ltoken='+Drupal.settings.s_common.logout_token+'&';
        }
        logoutHref += 'destination=home.php?deleted';
        newUrl = url.substring(0,index) + logoutHref;
        location.href = newUrl;
    };



   $('.profile-picture-wrapper:not(.sUser-processed)', context).addClass('sUser-processed').each(function(){
        var wrapper = $(this);
        var link = $('.edit-profile-picture-hover', wrapper);
        var pic = $('.profile-picture', wrapper);
        var uploader = $('#profile-picture-uploader-wrapper', wrapper);

        link.bind('click', function(){
          if(uploader.is(':visible')){
            uploader.hide();
          }
          else {
            uploader.show();
          }
        });
        $('body').bind('click', function(e){
            var target = $(e.target);
            if(!target.hasClass('profile-picture-wrapper') && target.parents('.profile-picture-wrapper').length == 0){
              uploader.hide();
            }
          });

        pic.bind('s_profile_picture_uploaded', function(e, path){
	      	$('img', $(this)).attr('src', path).removeAttr('height');
	        uploader.hide();
	      });

      });

  // remove a push notification device on the notifications settings page
  $('.push-remove:not(.sUser-processed)', context).addClass('sUser-processed').bind('click', function(e){
    e.preventDefault();

    var linkObj = $(this);
    var deviceNameString = '<span class="confirm-remove-device-name">' + linkObj.siblings('.push-os').html() + '</span>';
    var removeDevicePopupBody = '<span class="confirm-message">' +
      Drupal.t('Are you sure you want to deactivate !device_name?', {"!device_name" : deviceNameString}) +
      '</span>';

    sCommonConfirmationPopup({
      title: Drupal.t('Deactivate Device'),
      body: removeDevicePopupBody,
      extraClass: 'push-remove',
      confirm: {
        text: Drupal.t('Deactivate'),
        func: function(){
          $.ajax(linkObj.attr('href'), {
            data: {ajax: true},
            success: function(data){
              if(data.body){
                $('#content-wrapper').html(data.body);
                if(data.messages){
                  var mainWrapperObj = $('#main-content-wrapper');
                  mainWrapperObj.children('.messages').remove();
                  mainWrapperObj.prepend(data.messages);
                }
                Drupal.attachBehaviors($('#main-content-wrapper'));
              }
            },
            complete: function(){
              Popups.activePopup().close();
            }
          });
        }
      }
    });
  });
}

function repositionZClipboard(){
    var offset = $('#invite_link').offset();
    var pOffset = $('.popups-box').offset();
    $('.zclipboard').css('left', offset.left - pOffset.left);
    $('.zclipboard').css('top', offset.top - pOffset.top);
}
;Drupal.behaviors.sCourseMaterialsFolders = function(context) {

  // Click behavior for link descriptions, since you can't have <a> tags wrap other <a> tags
  // which would be possible with rich text descriptions
  $('.materials-folder.item-info:not(.sCourseMaterialsFolders-processed)', context).addClass('sCourseMaterialsFolders-processed').each(function(){
    var folder = $(this);
    // Will not trigger if the folder-title doesn't contain an 'a' tag (e.g. permission denied)
    var folderTitleLink = $('.folder-title a', folder);
    var folderDescription = $('.folder-description', folder);
    if(folderDescription.hasClass('description-clickable')){
      folderDescription.bind('click', function(e){
        // Ignore if the target is a link
        if(!$(e.target).is('a')){
          // Use vanilla JS to follow the href
          folderTitleLink[0].click();
        }
      })
    }
  });

  (function(){
    /**
     * Refresh the sortable tbody within the folder tree structure.
     * This is needed to link all the sortable table bodies after a subdirectory is opened.
     * This occurs when dragging an item over a folder for a period of time and a subtree is opened.
     *
     * @param object subtreeContext
     */
    function refreshSortableContent(subtreeContext){
      subtreeContext.closest('#folder-contents-table').find('tbody.ui-sortable').each(function(k, tbodyEl){
        // Make the sortable plugin refresh upon ajax completion
        // (to allow handling of dynamic folder expansion AJAX
        $(tbodyEl).sortable('refresh');
      });
    }

    /**
     * Toggle the visibility of the folder's content based on the expander object.
     *
     * @param object $expander  the expander element that is linked to the folder being expanded
     * @param bool show  whether this is a show or hide operation
     */
    function toggleSubtree($expander, show){
      var $subtree = $expander.siblings('.folder-subtree'),
          $subtreeLinks = $subtree.find('.action-links-wrapper'),
          $description = $expander.parent().find('.s-js-folder-description'),
          $title = $expander.parent().find('.folder-title'),
          show = show || false,
          folderId = $expander.closest('.material-row-folder').attr('id').split('-')[1];

      var easing = 'easeInQuad',
          duration = 300;
      function toggleVisibility(show_subtree){
        if(show_subtree){
          descFunc = 'slideUp';
          subtreeFunc = 'slideDown';
        }
        else{
          descFunc = 'slideDown';
          subtreeFunc = 'slideUp';
        }
        $description[descFunc]({
          duration: duration,
          easing: easing
        });
        // hidding the action links wrapper since they are positioned absolutely and will appear in an unsightly manner
        // during the course of the animation
        $subtreeLinks.hide();
        $subtree[subtreeFunc]({
          duration: duration,
          easing: easing,
          done: function(){
            $subtreeLinks.show();
          }
        });
      }

      if(show){
        $expander.find('.visually-hidden').text(Drupal.t('Collapse folder.'));
        // If subtree was already loaded, show it
        if($subtree.length){
          toggleVisibility(true);
        }
        // Load the subtree
        else {
          $loader = $('<img class="pending" src="/sites/all/themes/schoology_theme/images/ajax-loader.gif" alt="' + Drupal.t('Loading') + '" />');
          $subtree = $('<div class="folder-subtree"></div>');
          $expander.parent().append($subtree);

          $title.after($loader);

          $.ajax({
            dataType: 'json',
            url: window.location.pathname,
            data: {
              ajax: 1,
              f: folderId
            },
            success: function(contents){
              contents = $(contents);

              // Do a little bit of cleanup
              // Since the helper function we use creates a form,
              // remove the form wrapper and other form artifacts
              $('form>div', contents).unwrap();
              $('[name=form_build_id], [name=form_token], [name=form_id]', contents).remove();
              $loader.remove();
              $subtree.hide().html(contents);
              toggleVisibility(true);
              Drupal.attachBehaviors($subtree);
              $('tr td.actions', $subtree).sActionLinks({ hidden: false, wrapper: '.action-links-wrapper' });

              var foldersActionPush = $(document).data('sCourseMaterialsFoldersActionPush');
              if(foldersActionPush && foldersActionPush.length){
                var fid = foldersActionPush.pop();
                var $expander = $('#f-' + fid + ' > td.folder-contents-cell > .folder-expander');
                if(!$expander.hasClass('expanded')){
                  $expander.click();
                }
                $(document).data('sCourseMaterialsFoldersActionPush', foldersActionPush);
              }
              else{
                refreshSortableContent($subtree);
              }
            },
            error: function(){
              $subtree.html('<div class="error">' + Drupal.t('There was an error while loading the folder content. Please reload this page and try again.') + '</div>');
              refreshSortableContent($subtree);
            }
          });
        }
      }
      else{
        $expander.find('.visually-hidden').text(Drupal.t('Expand folder.'));
        toggleVisibility(false);
      }
    }

    // Behavior for folder AJAX expanders
    $('.folder-contents-cell .folder-expander:not(.sCourseMaterialsFolders-processed)', context ).addClass('sCourseMaterialsFolders-processed').each(function(){
      var $expander = $(this);
      $expander.click(function(){
        var show = !$expander.hasClass('expanded');
        $expander.toggleClass('expanded');
        toggleSubtree($expander, show);
      });
    });
  })();

  // Keep track of actionlink clicks to re-expand the tree
  // after content refresh from popups
  // Only do this if there is a #folder-contents-table
  if($('#folder-contents-table').length){
    $('body:not(.sCourseMaterialsFolders-processed)', context).addClass('sCourseMaterialsFolders-processed').each(function(){
      $(document).bind('popups_open_path', function(event, element, href){
        var target = $(element).parents();
        // Handle the action if the popup source is action-links-wrapper or a descendant
        if(target.hasClass('action-links-wrapper') || target.closest('.action-links-wrapper').length){
          var foldersActionPush = [];

          // Start from the subtree div so it doesn't count the current folder
          target.closest('.subtree-folder-contents-table').parents('tr.material-row-folder').each(function(){
            foldersActionPush.push($(this).attr('id').split('-')[1]);
          });

          if(foldersActionPush && foldersActionPush.length){
            // Store this array in a data field rather than a global
            // variable since the AJAX success functions don't play nice
            // with global variables
            $(document).data('sCourseMaterialsFoldersActionPush', foldersActionPush);
          } else {
            $('.folder-expander.expanded').trigger('click');
          }
            
          location.hash = 'foldersexpanded=' + foldersActionPush.join(',');
        }
        if(target.closest('#course-materials-action-links-inline').length){
          var foldersActionPush = [];
          var materialsRowAddId = target.closest('#course-materials-action-links-inline').data('materialsRowAddId');
          if(materialsRowAddId){
            $('#' + materialsRowAddId).parents('tr.material-row-folder').each(function(){
              foldersActionPush.push($(this).attr('id').split('-')[1]);
            });
          }
          if(foldersActionPush.length){
            location.hash = 'foldersexpanded=' + foldersActionPush.join(',');
          }
        }
      }).bind('popups_form_success', function(event, popup, data){
        // Once the form succeeds, check to see if there are any fids
        // in the stored path - if so, ensure they're expanded
        var foldersActionPush = $(document).data('sCourseMaterialsFoldersActionPush');
        if(foldersActionPush && foldersActionPush.length){
          var fid = foldersActionPush.pop();
          var expander = $('#f-' + fid + '>td.folder-contents-cell>.folder-expander');
          if(!expander.hasClass('expanded')){
            expander.click();
          }
          $(document).data('sCourseMaterialsFoldersActionPush', foldersActionPush);

          // The AJAX behavior of the expander will continue to
          // pop the sCourseMaterialsFolderActionPath array
        }
      });
    });

    // Handle any foldersexpanded as dicated by the hash
    if(location.hash.match('foldersexpanded')){
      var foldersExpanded = location.hash.split('foldersexpanded=')[1].split(',');

      foldersExpanded.forEach(function(currentValue){
          var fid = currentValue;
          var expander = $('#f-' + fid + '>td.folder-contents-cell>.folder-expander');
          if(!expander.hasClass('expanded')){
              expander.click();
          }
      });
    }
  }

  $('#s-generic-post-new-display-view:not(.sCourseMaterialsFolders-processed),#folder-contents-table:not(.sCourseMaterialsFolders-processed)', context).addClass('sCourseMaterialsFolders-processed').each(function() {
    var table = $(this);

    if(table.attr('id') == 'folder-contents-table'){
      // Add action link behavior
	    $('tr td.actions').sActionLinks({ hidden: false, wrapper: '.action-links-wrapper' });

      var addMaterialsActionLinks = $('.materials-top .course-content-action-links .action-links');
      var inlineAddLinksWrapper = $('<div id="course-materials-action-links-inline" class="hidden"></div>');
      $('body').append(inlineAddLinksWrapper);
      var lastMaterialsRowAddTarget = null;

      table.click(function(e){
        var target = $(e.target);

        // Add materials behavior
        // Since the add materials action links are outside the table,
        // find them in the global context
        if(target.parent('.materials-row-add-line').length){
          var materialsRowAddId = target.closest('.materials-row-add').attr('id');
          var materialsRowAddIdSplit = materialsRowAddId.split('-');
          var targetFid = materialsRowAddIdSplit[3];
          var targetWeight = materialsRowAddIdSplit[4];

          // clicking on the same line should close the menu
          if(lastMaterialsRowAddTarget && materialsRowAddId == lastMaterialsRowAddTarget.closest('.materials-row-add').attr('id')){
            inlineAddLinksWrapper.hide();
            lastMaterialsRowAddTarget = null;
            return;
          }

          lastMaterialsRowAddTarget = target;

          // Make sure that the links we copy are the most up to date ones
          // that contain any dynamic changes to the original menu
          var targetOffset = target.offset();
          inlineAddLinksWrapper.empty()
            .data('materialsRowAddId', materialsRowAddId)
            .append(addMaterialsActionLinks.clone(true).show())
            .show()
            .css({
              position: 'absolute',
              top: targetOffset.top + target.height(),
              left: targetOffset.left
            });

          // Modify the links to reflect the proper folder and weight
          $('li', inlineAddLinksWrapper).each(function(){
            var actionItem = $(this);
            var actionLink = $('a', actionItem);
            var actionItemClass = actionItem.attr('class');

            //Some items, like the separator lines, don't contain links. Skip them.
            if(actionLink[0] == undefined) {
              return true;
            }

            var pathname = actionLink[0].pathname;

            // IE doesn't return a leading slash for href paths,
            // but other browsers do. For consistency, strip it
            // here and add it back below.
            pathname = pathname.replace(/^\//,'');

            var queryString = actionLink[0].search;
            if(!queryString.length){
              var qsParsed = {};
            }
            else {
              var qsParsed = getQueryParams(queryString);
            }

            switch(actionItemClass){
              case 'action-import-library':
                if(targetFid > 0){
                  qsParsed.topic_nid = targetFid;
                }
                else {
                  delete qsParsed.topic_nid;
                }
                qsParsed.fweight = targetWeight;
                actionLink.attr('href', '/' + pathname + '?' + jQuery.param(qsParsed));
                break;

              case 'action-find-resources':
                // Don't show the action-find-resources
                actionItem.remove();
                break;

              default:
                var isUnderStudentChoice = target.parents('.material-row-student-choice').length > 0;
                if (isUnderStudentChoice && (actionItemClass === 'action-create-folder' || actionItemClass === 'action-create-student-choice')) {
                    actionItem.remove();
                    return;
                }
                if(targetFid == 0 && !sCourseMaterialsDisplayIsWithoutIndex()){
                  // Only allow folders on top level
                  if(actionItemClass != 'action-create-folder'){
                    actionItem.remove();
                    return;
                  }
                  else {
                    actionItem.addClass('folder-no-materials');
                  }
                }

                qsParsed.f = targetFid;
                qsParsed.fweight = targetWeight;
                actionLink.attr('href', '/' + pathname + '?' + jQuery.param(qsParsed));
                break;
            }
          });
        }
      });

      // Click-out behavior
      $('body').click(function(e){
        var target = $(e.target);
        if(target.parent('.materials-row-add-line').length == 0){
          inlineAddLinksWrapper.hide();
          lastMaterialsRowAddTarget = null;
        }
      });
    }

    $('.has-view-rule:not(.completed)', table).click(function(){
    	var parent = $(this).parents('.type-document:first');
    	var nid = parent.attr('id').split('-')[1];
    	$.ajaxSecure({
    		url: '/course/materials/' + nid + '/view_completion'
    	});
    });
  });

  $('#closeable-message-s_course_find_resources:not(.sCourseMaterialsFolders-processed)', context).addClass('sCourseMaterialsFolders-processed').each(function(){
	  $(document).bind('s_common_closeable_message_closed', function(e, mesID){
		 if(mesID == 's_course_find_resources'){
			 var fakeCluetip = '<div class="fake-cluetip"><span class="arrow-top"><span>' + Drupal.t('You can find resources for your course in this menu.') + '</div>';
			 var offset = $('.course-content-action-links').offset();
			 $('body').append(fakeCluetip);
			 $('.fake-cluetip').css({'position': 'absolute' , 'left': offset.left + $('.course-content-action-links').width() , 'top': offset.top });
			 setTimeout(function(){
				 $('.fake-cluetip').remove();
			 }, 2000);
		 }
	  });
  });

  $('#s-course-materials-folder-create-form:not(.sCourseMaterialsFolders-processed)', context).addClass('sCourseMaterialsFolders-processed').each(function(){
    var form = $(this);

    var warningMsg = $('.rules-msg', form); //warning for completion rules removal if selected item has rule on it
    var startWrapper = $('.availability-start-wrapper', form);
    var addEndLink = $('.availability-add-end', form);
    var endWrapper = $('.availability-end-wrapper', form);
    var applyChildrenWrapper = $('#edit-apply-to-children-wrapper', form);

    // Add end time
    addEndLink.click(function(){
      $(this).remove();
      endWrapper.show();
      sPopupsResizeCenter()
    });

    if(typeof sCommonAdvancedOptions == 'object'){
      sCommonAdvancedOptions.registerEvent(form.attr('id'), 'custom-fields', 'sCourseMaterialsFolders', function(btnObj){
        if(btnObj.hasClass('adv-option-on')) {
          $("#folder-custom-fields-wrapper", form).show();
        }
        else {
          $("#folder-custom-fields-wrapper", form).hide();
        }
        sPopupsResizeCenter();
      });
    }

    $('#edit-availability', form).bind('change', function(){
      var val = parseInt($(this).val());

      //show/hide relevant form fields depending on the chosen folder availability settings
      switch(val){
      	//visible
        case 1:
          applyChildrenWrapper.show();
          if(warningMsg.length){
            warningMsg.hide();
          }
          break;
        //hidden
        case 2:
          applyChildrenWrapper.hide();
          if(warningMsg.length){
            warningMsg.show();
          }
          break;
        //Available after...
        case 3:
          applyChildrenWrapper.hide();
          if(warningMsg.length){
            warningMsg.show();
          }
          break;
        //Available between...
        case 4:
          applyChildrenWrapper.hide();
          if(warningMsg.length){
            warningMsg.show();
          }
          addEndLink.remove();
          endWrapper.show();

          break;
        default:
          break;
      }

      sPopupsResizeCenter()
    });

    $('#edit-availability', form).trigger('change');
  });

  $('#s-course-materials-folder-completion-form:not(.sCourseMaterialsFolders-processed)', context ).addClass('sCourseMaterialsFolders-processed').each(function(){

    var form = $(this);
	  hasDueList = new Array();

      //bind click event on the html links to the hidden ahah submitters
      $('.add-rule', form).click(function(){
          if (!$(this).hasClass('disabled')){
            $('#edit-rules-submitter', form).trigger('click');
          }
      });

      $('.auto-populate', form).click(function(){
    	 $('.ahah-populate-submitter', form).trigger('click');
      });

      //bind javascript events for the existing rule fields
      sCourseMaterialsSetupRules(form, true);
      sCourseMaterialsSetupRemove('rule-option', form);
      
      $(document).ajaxSend(function(e, xhr, settings){
        //right before ajax request is sent add class to disable button until request is complete
        if(settings.url == '/course/new_rule'){
            $('.add-rule', form).addClass('disabled');  
        } 
      })
      //if ahah fields are produced, rebind the javascript events on the ahah fields
      $(document).ajaxComplete(function(e, xhr, settings){
    	  if(settings.url == '/course/new_rule' || settings.url == '/course/remove_rule' || settings.url == '/course/populate_rule'){                  
    		  sCourseMaterialsSetupRules(form, false, (settings.url == '/course/remove_rule'));
    		  sCourseMaterialsSetupRemove('rule-option', form);

    		  //hide the "add prerequisites" link if user made all folders sequential at the root level
    		  var addRule = $('.add-rule', form);
    		  if(settings.url == '/course/populate_rule'){
    			  addRule.hide();
    		  }
    		  //reshow the "add prerequisites" link if user removes one of the populated rules
    		  else if(settings.url == '/course/remove_rule' && !addRule.is(':visible')){
    			  addRule.show();
    		  }
                  //free up button
                  $('.add-rule', form).removeClass('disabled');  
    	  }
    	  sPopupsResizeCenter();
      });
  });

}

/**
 * Setup the delete buttons next to the fields
 */
function sCourseMaterialsSetupRemove(parentClass, form){
    $('.' + parentClass + ':not(.sCourseMaterialsFolders-processed)', form).addClass('sCourseMaterialsFolders-processed').each(function(){
    	var parent = $(this);
    	$('.delete-btn', parent).click(function(){
    		var id = parent.attr('id');
    		var existing = parent.hasClass('existing') ? '1' : '0';
    		//record the rid of the deleted field and if the deleted field was na existing rule
    		$('.rule-remove-existing', form).val(existing);
    		$('.rule-remove-id', form).val(parseInt(id));
    		//trigger the deletion
    		$('.ahah-remove-rule', form).click();
    	});
    });
}

/**
 * Setup form behavior for the rule fields
 */
function sCourseMaterialsSetupRules(form, existing, ahahCallback){
	if(typeof ahahCallback == 'undefined')
		ahahCallback = false;

  if(typeof Drupal.settings.s_course == 'undefined' && typeof Drupal.settings.s_course.type_options == 'undefined')
    return;

	var typeOptions = Drupal.settings.s_course.type_options;
	var types = Drupal.settings.s_course.types;
  var maxPts = Drupal.settings.s_course.max_pts;
  var constants = Drupal.settings.s_course.constants; //the numerical constant which corresponds to the "must score at least" rule
  var dueEvents = Drupal.settings.s_course.due_events;
  var commentsDisabled = Drupal.settings.s_course.comments_disabled;
  var submitDisabled = Drupal.settings.s_course.submit_disabled;

	$('.rule-item:not(.sCourseMaterialsFolders-processed)', form).addClass('sCourseMaterialsFolders-processed').each(function(){
  	var itemField = $(this);
  	var ruleContext = itemField.parents('.rule-option:first');
  	var id = ruleContext.attr('id');
  	var firstChange = true;

  	//bind events when the object field of the rule is changed
  	itemField.change(function(e){
    	var item = itemField.val();
    	var ruleAction = $('.rule-action', ruleContext);
    	var itemType = types[item];
    	if(typeof dueEvents[item] != 'undefined' && dueEvents[item] > 0){
    		$('.has-due-event-warning', form).show();
    		hasDueList[parseInt(id)] = true;
    	}
    	else{
    		hasDueList[parseInt(id)] = undefined;
    	}

    	if(!hasDueList.join('').length){ //join the array in order to get rid of 'undefined' entries in the array so that they wouldn't be counted
    		$('.has-due-event-warning', form).hide();
    	}

    	//hide and/or show options that are allowed for the current type
    	var selected = $('option:selected', ruleAction).val();
    	ruleAction.empty();
    	$('.action-options option').each(function(){
    		var option = $(this);
    		var action = option.val();
    		//skip the comment rule if comment is disabled
    		if(action == constants.comment && commentsDisabled[item] == true){
    			return true;
    		}
    		//skip the submit/score at least rule if submit (eg. dropbox) is disabled
    		if((action == constants.submit || action == constants.score) && submitDisabled[item] == true){
    			return true;
    		}
    		if($.inArray(parseInt(action), typeOptions[itemType]) > -1){
    			var clonedOption = option.clone().appendTo(ruleAction);
    			if(clonedOption.val() == selected){
    				clonedOption.attr('selected', 'selected');
    			}
    		}
    	});

    	//reset action field to the first option
    	if((!firstChange || !existing) && !ahahCallback){
    		ruleAction.val($('option:visible:first', ruleAction).val());
    	}
    	else{
    		firstChange = false;
    	}

    	//hide the max points field
    	$('.max-pt', ruleContext).hide();
    	//change rule icon to current content type
    	$('.rule-icon', ruleContext).html(Drupal.settings.s_course.rule_icons[itemField.val()]);
    	sPopupsResizeCenter();
  	});

  	//fire event for first time display
  	itemField.change();
  });

	$('.rule-action:not(.sCourseMaterialsFolders-processed)', form).addClass('sCourseMaterialsFolders-processed').each(function(){
		var actionField = $(this);
		var ruleContext = actionField.parents('.rule-option:first');

		//bind events when the action field of the rule is changed
		actionField.change(function(){
			var item = $('.rule-item', ruleContext).val();
      	if(actionField.val() == constants.score){
      		//if the action is to "score at least" modify maxpts to correspond to the current item's max points
      		$('.max-pt-num', ruleContext).html(maxPts[item]);
      		$('.max-pt', ruleContext).show();
      	}
      	else{
      		$('.max-pt', ruleContext).hide();
      	}
      	sPopupsResizeCenter();
		});

		//fire event for first time display
		actionField.change();
	});
};Drupal.behaviors.sCourse = function(context) {
  var settingsCourse = Drupal.settings.s_course;
  var DEFER_LOADING = 'defer';
  var DISABLE_LOADING = 'disable';

  if ($('body').hasClass('s-enable-mathml')) {
    s_renderMath();
  }

  $('.assignments-container:not(.sCourse-processed)' , context).addClass('sCourse-processed').each(function(){
    setupAssignmentPaging(this);
  });

  // Reordering for subtrees and planner view right column
  $('.subtree-folder-contents-table:not(.sCourse-processed), .planner-right-contents-table:not(.sCourse-processed), #folder-contents-table:not(.sCourse-processed)' , context ).addClass('sCourse-processed').each(function() {
    var table = $(this);
    sCourseEnableContentReorder($('>tbody', table));
  });

  $('.access-code:not(.sCourse-processed)').addClass('sCourse-processed').each(function(){
	 var acContext = this;
	 $('.access-delete', acContext).click(function(){
		var path = window.location.pathname.substring(1);
		var courseID = path.split('/')[1];
		$.ajaxSecure({
			url : '/enrollment/code/visibility/course/' + courseID + '/hide',
			dataType: 'json',
			type: 'GET',
			success: function(response, status){
				$(acContext).hide();
			}
		});
	 });
  });

  $('#course-reminders:not(.sCourse-processed)' , context ).addClass('sCourse-processed').each(function() {
    var $rightColumn = $(this);
    var reminders = settingsCourse && settingsCourse.reminders;
    var $remindersWrapper = $('.reminders-wrapper', $rightColumn);
    switch (reminders) {
      case DEFER_LOADING:
        $remindersWrapper.show();
        var $refreshWrapper = $remindersWrapper.find('.reminders-content .refresh-wrapper');
        $refreshWrapper.find('.refresh-button').on('click', function() {
          $refreshWrapper.find('> p').each(function() {
            var $element = $(this);
            if (!$element.hasClass('more-loading')) {
              $element.hide();
            }
          });
          getCourseReminders($remindersWrapper, 0);
        });
        break;
      case DISABLE_LOADING:
        $remindersWrapper.show();
        break;
      default:
        getCourseReminders($remindersWrapper, 0, true);
        break;
    }
  });

  /**
   * Fetches and attaches the course reminders block (ungraded submissions, resubmissions, etc.)
   *
   * @param {jQuery} $remindersWrapper
   * @param {number} [retry] - The number of times to retry the request.
   * @param {boolean} [removeIfEmpty] - Whether the reminders block should be removed if empty.
   */
  function getCourseReminders($remindersWrapper, retry, removeIfEmpty) {
    var $loading = $remindersWrapper.find('.more-loading');
    $loading.show();

    var path = window.location.pathname.substring(1);
    var courseId = path.split('/')[1];

    $.ajax({
      url: '/course/' + courseId + '/course_reminders_ajax' + (retry ? '?retry=' + retry : ''),
      dataType: 'json',
      type: 'GET',
      success: function(response) {
        $loading.hide();

        if (response.retry_in) {
          // after the specified retry time, retry getting the course reminders
          setTimeout(function() {
            getCourseReminders($remindersWrapper, retry + 1, removeIfEmpty);
          }, response.retry_in);
        } else if (response.html) {
          $remindersWrapper.html(response.html);
          $remindersWrapper.show();
          Drupal.attachBehaviors($remindersWrapper);
          sCourseSetupTodoList($remindersWrapper);
        } else {
          if (removeIfEmpty) {
            $remindersWrapper.remove();
          } else {
            $remindersWrapper.show();
            $remindersWrapper.find('.reminders-content').html('<div class="empty">' + Drupal.t('No current reminders') + '</div>');
          }
        }
      }
    });
  }

  /**
   * Loads upcoming events.
   *
   * @param {jQuery} $courseUpcoming - The "Upcoming" element.
   */
  function loadUpcomingEvents($courseUpcoming) {
    var path = window.location.pathname.substring(1);
    var courseId = path.split('/')[1];
    $.ajax({
      // pass the current path so that the calendar nav uses the right link (the current page)
      // and also be sure to pass any ?mini arguments for changing the date in the cal
      url: '/course/' + courseId + '/calendar_ajax' + (window.location.search.length ? window.location.search + '&' : '?') + 'original_q=' + path,
      dataType: 'json',
      type: 'GET',
      success: function(response) {
        $courseUpcoming.find('.upcoming-list').html($(response).children());
        if (window.location.search.match('mini=')) {
          $('#event-calendar', selector).click();
        }
        // ie 8 is complaining about too much js on the course materials page, skip using attachBehaviors here
        // to cut down on executed javascript on this page
        sAttachBehavior('sCourse' , $courseUpcoming);
        sAttachBehavior('sCommonInfotip', $courseUpcoming);
        $courseUpcoming.show();
      }
    });
  }

  $('#course-events:not(.sCourse-processed)' , context).addClass('sCourse-processed').each(function() {
    var $courseUpcoming = $(this);
    $courseUpcoming.show();

    var upcoming = settingsCourse && settingsCourse.upcoming;
    switch (upcoming) {
      case DEFER_LOADING:
        var $refreshWrapper = $courseUpcoming.find('.upcoming-list .refresh-wrapper');
        $refreshWrapper.find('.refresh-button').on('click', function() {
          $refreshWrapper.find('> p').each(function() {
            var $element = $(this);
            if (!$element.hasClass('more-loading')) {
              $element.hide();
            }
          });
          $courseUpcoming.find('.upcoming-list .more-loading').show();
          loadUpcomingEvents($courseUpcoming);
        });
        break;
      case DISABLE_LOADING:
        break;
      default:
        $courseUpcoming.find('.upcoming-list .more-loading').show();
        loadUpcomingEvents($courseUpcoming);
        break;
    }

    $('#event-calendar', $courseUpcoming).click(function() {
        var popup = new Popups.Popup();
        var body = '<div id="fcalendar" style="width: 800px;"></div>';
        var buttons = {
          'popup_cancel': {
            title: Drupal.t('Close'),
            func: function() { popup.close(); }
          }
        };

        popup.extraClass = 'popups-extra-large calendar-popup-mini';
        var activePopup = popup.open(Drupal.t('Calendar'), body, buttons);
        Drupal.attachBehaviors( $('#' + String(activePopup.id)+ '') );
        Drupal.behaviors.sCommonMediaFileIframeUseRelativeUrl($('#' + String(activePopup.id)+ ''));
        $("#share-calendar-option-containter .share-calendar-option").insertAfter("#fcalendar");
        sPopupsResizeCenter();
    });
  });

  $('div#course-profile-selector:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    var selectorWrapper = $(this);
    $('li', selectorWrapper).click(function() {
      var selector = $(this);
      if (selector.attr('id') == 'selector-materials') {
        $("#course-profile-materials").show();
        $("#course-profile-updates").hide();
      }
      if (selector.attr('id') == 'selector-updates') {
        $("#course-profile-updates").show();
        $("#course-profile-materials").hide();
      }
      $('li.active', selectorWrapper).removeClass('active');
      selector.addClass('active');
    });
  });

  $('div#important-post:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    var importantPostContainer = $(this);
    $("a.important-remove-hidden", importantPostContainer).bind("click", function() {
      $(this).parent().parent().find("form").submit();
      return false;
    });
  });


  $('.course-info-wrapper:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    var wrapper = $(this);
    var moreInfo = $('.course-info-full', wrapper);
    var lessInfo = $('.course-info-less', wrapper);
    $('.more-link', wrapper).click(function() {
      lessInfo.hide();
      moreInfo.show();
    });
    $('.less-link', wrapper).click(function() {
      lessInfo.show();
      moreInfo.hide();
    });

  });

  $('.notification-settings:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
	  sUserSetupRealmNotifButton($(this));
  });

  $('.profile-picture-wrapper:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
    var wrapper = $(this);
    var link = $('.edit-profile-picture-hover', wrapper);
    var pic = $('.profile-picture', wrapper);
    var uploader = $('#profile-picture-uploader-wrapper', wrapper);

    link.bind('click', function(){
      if(uploader.is(':visible')){
        uploader.hide();
      }
      else {
        uploader.show();
      }
    });

    $('body').bind('click', function(e){
      var target = $(e.target);
      if(!target.hasClass('profile-picture-wrapper') && target.parents('.profile-picture-wrapper').length == 0){
        uploader.hide();
      }
    });

    pic.bind('s_profile_picture_uploaded', function(e, path){
    	$('img', $(this)).attr('src', path).removeAttr('height');
      uploader.hide();
    });
  });

  $('li.assignment .action-links-wrapper:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    $(this).sActionLinks( {
      hidden : false,
      wrapper : '.action-links-wrapper'
    });
  });

  $('#link-sections-wrapper:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    $(this).sActionLinks({hidden : false, wrapper : '#link-sections-wrapper'});
  });

  $('#s-course-settings:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    $(this).sActionLinks( {
      hidden : false,
      wrapper : '.action-links-wrapper'
    });
  });

  // Materials index toolbar (add materials, options)
  $('#course-profile-materials .materials-top:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
    var wrapperObj = $(this);

    // Options -> Print behavior
    $('#print-view', wrapperObj).bind('click', function(){
      // Add a body class and a button to return to previous view
      $('body').addClass('print-view');
      var returnBtn = $('<div id="print-return"><span>' + Drupal.t('Return to previous page') + '</span></div>');
      returnBtn.click(function(){ location.reload(); });
      $('body').prepend(returnBtn);
      $('#course-profile-materials .ui-sortable').sortable('destroy')
      window.print();
    });

    $('#toolbar-options-wrapper', wrapperObj).addClass('sCourse-processed').each(function() {
      $(this).sActionLinks({hidden : false, wrapper : '#toolbar-options-wrapper'});
    });

    $('.course-content-action-links', wrapperObj).each(function() {
      // initialze add materials drop down menu
      $(this).sActionLinks( {
        hidden : false,
        wrapper : '.action-links-wrapper'
      });

      // register click handler for app canvas pop
      $('.action-links.has-material-apps', this).on('click', '.action-lti-app', function (e) {
        e.preventDefault();
        // @see s_tinymce_resources_insert_app_popup()
        var url = '/tinymceinsertresourcesapp?r=' + String( $(this).data('realm') ) +
                                            '&id='+String( $(this).data('realm_id') ) +
                                            '&a='+String( $(this).data('app_nid') ) +
                                            '&context=materials';
        /*
           we need to extract folder_id and inline weight from url since this information is dynamically
           updated for the inline course materials add popup menu
         */
        var qParams = getQueryParams($('a', this).prop('href'));
        if(qParams && typeof qParams.f != 'undefined') {
          url += '&f=' + String(qParams.f);
        }

        if(qParams && typeof qParams.fweight != 'undefined') {
          url += '&fweight=' + String(qParams.fweight);
        }

        Popups.saveSettings();
        // The parent of the new popup is the currently active popup.
        var parentPopup = Popups.activePopup();
        var popupOptions = Popups.options({
          ajaxForm: false,
          extraClass: 'popups-extra-large popups-insert-library',
          updateMethod: 'none',
          href: url,
          hijackDestination: false,
          disableCursorMod: true,
          disableAttachBehaviors: false
        });
        // Launch the cookie preload popup first, then launch app
        var cookiePreloadUrl = sCommonGetSetting('s_app', 'cookie_preload_urls', $(this).data('app_nid'));
        if(cookiePreloadUrl) {
          sAppMenuCookiePreloadRun($(this).data('app_nid'), cookiePreloadUrl, function(){
            // clear cached launch data since we store cookie preload attempts in session
            sAppLauncherClearCache($(this).data('app_nid'));
            sAppMenuCookiePreloadDelete($(this).data('app_nid'));
            Popups.openPath(this, popupOptions, parentPopup);
          });
        }
        // launch app popup
        else {
          Popups.openPath(this, popupOptions, parentPopup);
        }
      });
    });
  });

  $('.past-assignments-grading-period .clickable:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    $(this).click(function() {
      var periodAssignments = $('>ul', $(this).parent());
      if (periodAssignments.css('display') == 'none') {
        $(this).parent().removeClass('assignments-hidden');
        periodAssignments.show();
      }
      else {
        $(this).parent().addClass('assignments-hidden');
        periodAssignments.hide();
      }
    });
  });

  $('.s-course-editor-wrapper .save-and-continue-btn:not(.sCourse-processed)',context).addClass('sCourse-processed').bind('click', function() {
    var wrapper = $(this).parents('.s-course-editor-wrapper');
    var form = wrapper.find('form');
    form.submit();
    return false;
  });

  // materials shortcut
  $('#menu-s-main a.course-materials-left-menu:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
    var menuLink = $(this),
        menuLinkArrow = $('.materials-dropdown-arrow', menuLink),
        menuDropdown = $("#course-materials-dropdown"),
        menuDropdownHasContent = menuDropdown.find('.item-list ul').length > 0;
    menuLink.after(menuDropdown);

    // check if the associated menu dropdown has content before showing the menu link arrow
    // the arrow is rendered in a title callback so it doesn't have any knowledge of whether there should be content or
    // not in the backend
    if(menuDropdownHasContent){
      menuLinkArrow.removeClass('hidden').click(function() {
        var arrow = $(this);
        var hidden = menuDropdown.is(':hidden');
        if (hidden) {
          $('body').bind('click.sCourseMaterialsHandle',function(e) {
            var target = $(e.target);
            var hidden = menuDropdown.is(':hidden');
            if (!hidden && target != menuDropdown && target.parents('#course-materials-dropdown').length == 0) {
              $('.materials-dropdown-arrow', menuLink).click();
            }
          });

          menuDropdown.show()
          $(this).addClass('active');
        }
        else {
          menuDropdown.hide();
          $(this).removeClass('active');
          $('body').unbind('click.sCourseMaterialsHandle');
        }
        return false;
      });
    }
    else{
      menuLinkArrow.hide();
    }
  });

  $('#right-column .reminders-wrapper:not(.sCourse-processed)', context ).addClass('sCourse-processed').each(function(){
	  sCourseSetupTodoList( $(this) );
  });

  /**
   * TRACK ANY COURSE SPECIFIC GENERIC POST VIEWS. THIS BEHAVIOR ONLY NEEDS TO BE ATTACHED
   * ONCE SO PUT IT OUTSIDE OF DRUPAL.ATTACHBEHAVIORS()
   */
  if (!$('body').hasClass('anonymous')) {
    $('.gen-post-link:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function() {
      var genPostLink = $(this);
      // .one() adds a single-use binding, allowing a .click() on a successful ajax request to trigger the link properly
      genPostLink.one('click', function(e) {
        if (!genPostLink.hasClass('embed-cover') && !genPostLink.hasClass('media-player-popup')) {
          e.preventDefault();
        }
        sCourseTrackGenericPostView($(this));
      });
    });
  }

  // associated with theme('s_course_area_switcher')
  $('.s-js-course-area-switcher .action-links-wrapper:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
    $(this).sActionLinks({hidden: false ,wrapper: '.badge-action-links'});
  });

  /**
   * This block processes the handling of materials filter views.
   *
   * Behaviors include:
   *   Handle updating of the content body when filters are changed and AJAX'ed in
   *   Handle the binding of popups behaviors on gear/action links menus
   *   Handle the "more link" and its infinite scrolling behavior for pagination
   *
   * @param object context
   */
  (function(context){
    // this is the main body of the full view of the course materials listing
    $('.s-js-course-materials-full:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
      var wrapperObj = $(this),
          actionLinksWrapper = wrapperObj.find('.s-js-materials-filter-wrapper .action-links-wrapper'),
          actionLinksLabel = actionLinksWrapper.find('.action-links-unfold-text'),
          optionsMenu = wrapperObj.find('.s-js-options-action-links-outer'),
          selectedFilterItem = null;

      /**
       * Update the option menu based on the provided current
       * Show only the option specified by the filter argument
       *
       * @param string filter
       */
      function updateOptionMenu(filter){
        optionsMenu.find('.s-js-content-option').hide().addClass('content-option--hidden');
        optionsMenu.find('.s-js-content-option-' + filter).show().removeClass('content-option--hidden');

        if (optionsMenu.find('li:not(.content-option--hidden)').length) {
          optionsMenu.show();
        } else {
          optionsMenu.hide();
        }
      }

      /**
       * Change the selected filter to provided filter.
       * This only updates the UI of the actual filter controls and not the content of the page.
       *
       * @param string filter
       */
      function changeSelectedFilter(filter){
        selectedFilterItem = actionLinksWrapper.find('.s-js-material-filter-' + filter.replace(/_/g, '-'));
        var currentFilter = actionLinksWrapper.data('filter'),
            newFilter = selectedFilterItem.data('filter');

        if(currentFilter != newFilter){
          actionLinksWrapper.data('filter', newFilter);
          actionLinksWrapper.find('.selected').removeClass('selected');
          selectedFilterItem.closest('li').addClass('selected');
          actionLinksLabel.text(selectedFilterItem.text());
        }
      }

      /**
       * Refresh the content of the current filter stored in currentFilterInfo.
       *
       * Events called:
       * sCourseMaterialsFilterChanged({filter: newFilter, url: newUrl})
       *   called when a different filter is selected and page content should be updated
       */
      function refreshContent(){
        if(selectedFilterItem && selectedFilterItem.length){
          var filter = getHashFilter(),
              oldFilter = selectedFilterItem.data('filter');
          if(filter != oldFilter){
            changeSelectedFilter(filter);
          }
          sAngular.trigger('sCourseMaterialsFilterChanged', {
            filter: selectedFilterItem.data('filter'),
            url: selectedFilterItem.attr('href')
          });
        }
      }

      /**
       * Fetch the content from the url of the provided filter
       *
       * Events called:
       * sCourseMaterialsFilterContentRefreshed(filter)
       *
       * @param string url
       * @param string filter
       */
      function getContent(url, filter){
        var activeLoaderKey = 's-js-course-materials-full';

        url += (url.indexOf('?') ? '&' : '?') + 'ajax=1&style=full';
        sToggleActiveLoader(activeLoaderKey, wrapperObj);
        $.ajax({
          url: url,
          success: function(data){
            var contentObj = $(data),
                currentMaterialsBody = wrapperObj.find('.s-js-materials-body'),
                newMaterialsBody = contentObj.find('.s-js-materials-body');
            if(currentMaterialsBody.length){
              currentMaterialsBody.replaceWith(newMaterialsBody);
            }
            else{
              wrapperObj.append(newMaterialsBody);
            }

            Drupal.attachBehaviors(wrapperObj.find('.s-js-materials-body'));

            sAngular.trigger('sCourseMaterialsFilterContentRefreshed', filter);
          },
          complete: function(){
            sToggleActiveLoader(activeLoaderKey);
          }
        });
      }

      /**
       * Parse the filter from the current hash state
       *
       * @return string
       */
      function getHashFilter(){
        var filter = 'all',
            matches = /filter_type=(\w+)/.exec(window.location.hash);
        if(matches){
          filter = matches[1];
        }
        return filter;
      }

      /**
       * Update the current hash state to the provided filter
       *
       * @param string filter
       */
      function setHashFilter(filter){
        window.location.hash = '!filter_type=' + filter;
      }

      $(window).on('hashchange', function(e){
        refreshContent();
      });

      // listen for the sCourseMaterialsFilterChanged event (called when filter change and new content should be loaded)
      // and update the contents of the view based on the filter selected.
      sAngular.on('sCourseMaterialsFilterChanged', function(data){
        var filter = data.filter,
            url = data.url;

        getContent(url, filter);
      });

      // keep track of which filters have already bound the popups configs so it doesn't get called again
      var popupsConfigBound = {};

      // these options are common to all of the above popup options
      var defaultPopupsOpts = {
        updateMethod: 'callback',
        onUpdate: function(data, popupOptions, popupElement){
          // on updating, cause the content of the materials to refresh instead of the entire page for a better experience
          refreshContent();
          Popups.close();
          return false;
        }
      };

      // these popups config are used in many of the material type filters
      var commonPopupsConf = {
        '.materials-item-actions .action-publish a': {extraClass: 'popups-small popups-publish'},
        '.materials-item-actions .action-unpublish a': {extraClass: 'popups-small popups-unpublish'},
        '.materials-item-actions .action-delete a': {extraClass: 'popups-small popups-action-item'},
        '.materials-item-actions .action-move a': {extraClass: 'popups-small popups-action-item'},
        '.materials-item-actions .action-copy a': {extraClass: 'popups-large popups-copy popups-action-item'},
        '.materials-item-actions .action-distribute a': {extraClass: 'popups-large popups-copy popups-action-item'},
        '.materials-item-actions .action-library-save a': {extraClass: 'popups-large'},
        '.materials-item-actions .action-edit-properties a': {extraClass: 'popups-large'},
        '.materials-item-actions .s-js-locked-resource-link-diff': {extraClass: 'popups-extra-large linked-content-diff-view'},
        '.materials-item-actions .s-js-unlink-node': {extraClass: 'popups-small unlink-popup'},
        '.materials-item-actions .action-edit-link a': {extraClass: 'popups-large popups-action-item popups-add-link'}
      };

      // For CSM Common Assessment materials (only) we want to show an extra large popup
      var isCSM = !!sCommonGetSetting('s_realm_info', 'csm_realm_id');
      if (isCSM) {

        // SGY-22549
        // We want to conditionally show a larger popup for Managed Assessments edit
        // For Non-MA we need direct child ops '>' in order to prevent both selectors from being applied to the case where a MA is in a folder
        //   (because the folder also has a .dr element)
        commonPopupsConf['.dr:not(.type-common-assessment) > * > .materials-item-actions .action-edit a'] = {extraClass: 'popups-large popups-action-item'};
        commonPopupsConf['.type-common-assessment .materials-item-actions .action-edit a'] = {extraClass: 'popups-extra-large popups-action-item'};
      } else {
        commonPopupsConf['.materials-item-actions .action-edit a'] = {extraClass: 'popups-large popups-action-item'};
      }

      // these popups config are folder-specific, and should only be used when folders are available
      var folderPopupsConf = {
        '.materials-folder-actions .action-edit a': {
          extraClass: 'popups-large popups-action-item',
          targetSelectors: ['#s-course-materials-folder-contents-form']
        },
        '.materials-folder-actions .action-publish a': {
          extraClass: 'popups-small popups-action-item',
          targetSelectors: ['#s-course-materials-folder-contents-form']
        },
        '.materials-folder-actions .action-unpublish a': {
          extraClass: 'popups-small popups-action-item',
          targetSelectors: ['#s-course-materials-folder-contents-form']
        },
        '.materials-folder-actions .action-delete a': {
          extraClass: 'popups-small popups-action-item',
          updateMethod: 'reload'
        },
        '.materials-folder-actions .action-copy a': {
          extraClass: 'popups-large popups-action-item popups-copy',
          disableInputFocus: true,
          doneTest: 'course/.+?/materials($|[^\/].*)',
          updateMethod: 'reload'
        },
        '.materials-folder-actions .action-distribute a': {
          extraClass: 'popups-large popups-copy popups-action-item'
        },
        '.materials-folder-actions .action-move a': {
          extraClass: 'popups-small popups-action-item',
          targetSelectors: ['#course-profile-materials-folders'],
          updateMethod: 'reload',
          doneTest: '.+'
        },
        '.materials-folder-actions .action-library-save a': {
          extraClass: 'popups-large popups-action-item',
          hijackDestination: true,
          updateSource: 'final',
          doneTest: 'course/.+?/materials.*',
          updateMethod: 'reload',
        },
        '.materials-folder-actions .action-completion a': {
          extraClass: 'popups-large popups-action-item student-completion-popup'
        }
      };

      // called when new content is loaded based on a filter change
      // bind popup events to the provided context
      // since the wrapperObj never gets removed from the DOM, the event is bound once per filter type and delegated from it
      sAngular.on('sCourseMaterialsFilterContentRefreshed', function(filter){
        updateOptionMenu(filter);

        if(typeof popupsConfigBound[filter] == 'undefined'){
          popupsConfigBound[filter] = null;

          var popupsConf = {};

          switch(filter){
            case 'all':
              popupsConf = $.extend({}, folderPopupsConf, commonPopupsConf, {
                '.materials-item-actions .action-convert a': {extraClass: 'popups-small'},
                '.materials-item-actions .action-edit-xlarge a': {extraClass: 'popups-extra-large popups-action-item'},
                '.materials-item-actions .action-rename a': {extraClass: 'popups-small popups-action-item'},
                '.materials-item-actions .action-remove a': {extraClass: 'popups-small popups-action-item'},
                '.materials-item-actions .action-package-delete a': {extraClass: 'popups-small popups-package-delete'},
                '.materials-item-actions .action-edit-package-props a': {extraClass: 'popups-extra-large popups-package-edit-props'},
                '.materials-item-actions .action-edit-launch-props a': {extraClass: 'popups-small popups-package-edit-launch-props'},
                '.materials-item-actions .action-view-progress a': {extraClass: 'popups-extra-large popups-package-progress'},
                '.materials-item-actions .action-copy a': {
                  extraClass: 'popups-large popups-action-item popups-copy',
                  disableInputFocus: true,
                  doneTest: 'course/.+?/materials($|[^\/].*)',
                  updateMethod: 'reload',
                },
                '.materials-item-actions .action-move a': {
                  extraClass: 'popups-small popups-action-item',
                  targetSelectors: ['#course-profile-materials-folders'],
                  updateMethod: 'reload',
                  doneTest: '.+'
                },
                '.materials-item-actions .action-library-save a': {
                  extraClass: 'popups-large popups-action-item',
                  hijackDestination: true,
                  updateSource: 'final',
                  doneTest: 'course/.+?/materials.*',
                  updateMethod: 'reload',
                }
              });
              break;

            case 'assessments':
            case 'assignments':
            case 'discussion':
              popupsConf = $.extend({}, commonPopupsConf, {
                '.view-ind-assign': {extraClass: 'popups-small', 'disableInputFocus': true}
              });
              break;

            case 'scorm':
              popupsConf = $.extend({}, commonPopupsConf, {
                '.materials-item-actions .action-edit-package-props a': {extraClass: 'popups-extra-large popups-package-edit-props'},
                '.materials-item-actions .action-edit-launch-props a': {extraClass: 'popups-small popups-package-edit-launch-props'},
                '.materials-item-actions .action-view-progress a': {extraClass: 'popups-extra-large popups-package-progress'}
              });
              break;

            case 'web':
            case 'album':
              popupsConf = $.extend({}, commonPopupsConf);
              break;

            case 'pages':
              popupsConf = $.extend({}, commonPopupsConf, {
                '.materials-item-actions .action-edit-xlarge a': {extraClass: 'popups-extra-large'},
                '.materials-item-actions .action-add-to-folder a': {extraClass: 'popups-small'}
              });
              break;

            case 'documents_files':
            case 'documents_links':
            case 'documents_external_tools':
              popupsConf = $.extend({}, commonPopupsConf, {
                '.materials-item-actions .action-rename a': {extraClass: 'popups-small popups-action-item'},
                '.materials-item-actions .action-copy a': {
                  extraClass: 'popups-large popups-action-item popups-copy',
                  doneTest: 'course/.+?/materials($|[^\/].*)'
                }
              });
              break;
            case 'common_assessments':
            case 'course_assessment':
              popupsConf = $.extend({}, commonPopupsConf, {
                '.materials-item-actions .action-edit a': {hidden: false, extraClass: 'popups-large popups-action-item', wrapper: '.action-links-wrapper'},
                '.materials-item-actions .action-publish a': {hidden: false, extraClass: 'popups-small popups-publish',  wrapper: '.action-links-wrapper'},
                '.materials-item-actions .action-move a': {hidden: false, extraClass: 'popups-small popups-action-item', wrapper: '.action-links-wrapper'},
              });
              break;
          }

          if(!$.isEmptyObject(popupsConf)){
            var selectorPrefix = filter == 'all' ? '.s-js-full-view' : '.s-js-filtered-view-' + filter.replace(/_/g, '-'),
                globalConfig = sCommonGetSetting('popups', 'links') || {};
            $.each(popupsConf, function(selector, opts){
              // don't bind anything that is already bound in the global configuration
              if(typeof globalConfig[selector] == 'undefined'){
                opts = $.extend({}, defaultPopupsOpts, opts);
                wrapperObj.on('click', selectorPrefix + ' ' + selector, opts, function(e){
                  e.preventDefault();
                  return Popups.clickPopupElement(this, Popups.options(e.data));
                });
              }
            });
          }
        }
      });

      // the switcher that allows the user to access the filtered materials list
      // associated with theme('s_course_materials_list_view_switcher')
      actionLinksWrapper.sActionLinks({
        hidden: false
      });

      actionLinksWrapper.on('click', '.s-js-material-filter-link', function(e){
        e.preventDefault();
        var filter = $(this).data('filter');
        sStatsRecordEvent('course:materials:filter_clicked:' + filter);
        changeSelectedFilter(filter);
        setHashFilter(filter);
      });

      var initiallySelected = actionLinksWrapper.find('.selected'),
          hashFilter = getHashFilter();
      if(hashFilter != 'all'){
        // page opened with a hash string of list_filter=[filter]
        changeSelectedFilter(hashFilter);
        refreshContent();
      }
      else if(initiallySelected.length){
        // page opened with a query string of list_filter=[filter]
        var initialFilter = initiallySelected.find('.s-js-material-filter-link').data('filter');
        changeSelectedFilter(initialFilter);
        sAngular.trigger('sCourseMaterialsFilterContentRefreshed', initialFilter);
      } else {
	      sAngular.trigger('sCourseMaterialsFilterContentRefreshed', 'all');
      }
    });

    // these more links appear in the filtered views, which will cause infinite scrolling to occur
    $('.s-js-materials-filter-more-link:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
      var linkObj = $(this),
          loadMoreKey = 's-js-materials-filter-more';
      linkObj.sInfiniteScroll({
        loadMore: function(){
          linkObj.trigger('click');
        }
      }).on('click', function(e){
        e.preventDefault();
        var url = linkObj.attr('href'),
            wrapperObj = linkObj.closest('.s-js-course-materials-full'),
            currentMaterialsBody = wrapperObj.find('.s-js-materials-body');
        sToggleActiveLoader(loadMoreKey, linkObj);
        $.ajax({
          url: url,
          success: function(data){
            var newContentObj = $(data),
                newFilteredList = newContentObj.find('.s-js-filtered-view-list'),
                newMoreLink = newContentObj.find('.s-js-materials-filter-more-link');
            if(newFilteredList.length){
              currentMaterialsBody.find('.s-js-filtered-view-list').append(newFilteredList.children());
            }
            if(newMoreLink.length){
              currentMaterialsBody.append(newMoreLink);
            }
            // wait for the content to be in the DOM before attaching behaviors
            Drupal.attachBehaviors(currentMaterialsBody);
          },
          complete: function(){
            sToggleActiveLoader(loadMoreKey);
            linkObj.remove();
          }
        });
      });
    });

    // these are gear icons found in all of the materials filtered views
    $('.s-js-materials-filtered-actions:not(.sCourse-processed)', context).addClass('sCourse-processed').each(function(){
      $(this).find('.action-links-wrapper').sActionLinks({
        hidden: false
      });
    });
  }(context));
}

function sCourseEnableContentReorder(tbodyElement) {
  var allowRootLevelItems = sCourseMaterialsDisplayIsWithoutIndex();

  // Only enable sorting if the passed element is a decendant
  // of #course-profile-materials.materials-admin-view
  if(!tbodyElement.closest('#course-profile-materials').hasClass('materials-admin-view')){
    return;
  }

  // In the planner view, the left and right sortables shouldn't be connected
  var plannerView = $('#course-profile-materials-folders').hasClass('planner-view');
  if(plannerView){
    // Left column
    if(tbodyElement.parent().attr('id') == 'folder-contents-table'){
      var connectWith = false;
    }
    // Right column
    else {
      var connectWith = '.subtree-folder-contents-table>tbody, .planner-right-contents-table>tbody';
    }
  }
  // By default, connect all possible sortables
  else {
    var connectWith = '#folder-contents-table>tbody, .subtree-folder-contents-table>tbody, .planner-right-contents-table>tbody';
  }

  tbodyElement.sortable( {
    forcePointerForContainers: true, // use the mouse cursor to determine whether we've travelled between containers
    items: '> tr:not(.materials-row-add)',
    handle: '.folder-title, .item-title, .document-body-title, .item-icon, .inline-icon',
    connectWith: connectWith,
    cancel: '.materials-row-add, .type-empty',
    delay: 500,
    helper : function(e, currentItem) {
      var helper = currentItem.clone(),
          subtree = currentItem.find('.folder-subtree');
      helper.find('.folder-subtree').hide();
      helper.find('.s-js-folder-description').hide();

      // if a subtree exists, remove it's height from the floating helper
      // this is so intersection-calculations will not take into account the potentially giant empty space below the item title
      // for more information, see the use of this.helperProportions in _intersectsWith() of the jquery.ui.sortable plugin
      if(subtree.length){
        helper.height(currentItem.height() - subtree.height());
      }
      return helper;
    },
    placeholder: 'reorder-target-placeholder',
    opacity: 0.5,
    expandDelay: 500,
    expand: function(e, target){
      var expander = $('.folder-expander', target);
      if(expander.length && !expander.hasClass('expanded')){
        expander.click();
      }
    },
    start : function (e, ui){
      // stop the queued saving process
      sCourseSaveContentTableWeightsTimeout && clearTimeout(sCourseSaveContentTableWeightsTimeout);

      $('#folder-contents-table').addClass('sorting');

      // When moving starts, store the associated 'add materials' row
      // along with the row being moved
      var addRow = ui.placeholder.next('.materials-row-add');
      if(addRow.length){
        ui.item.data('sCourseReorderRowAdd', addRow);
      }
    },
    stop : function(e, ui) {
      $('#folder-contents-table').removeClass('sorting');

      var droppedRow = ui.item;
      var targetSortable = ui.item.parent();

      // Move the 'add materials' row to the new position
      var addRow = ui.item.data('sCourseReorderRowAdd');
      if(addRow){
        // Since the placeholder can end up before or after
        // an 'add materials' row, decide where to drop the new one
        if(ui.item.next('.materials-row-add').length){
          ui.item.before(addRow);
        }
        else {
          ui.item.after(addRow);
        }
        ui.item.removeData('sCourseReorderRowAdd');
      }

      // reweight all rows in the table
      var currentWeight = 0;
      var queryParsed = getQueryParams(window.location.search);
      var currentFid = queryParsed.f || 0;
      var parentFolderRow = ui.item.parent().closest('.material-row-folder');
      if(parentFolderRow.length){
        currentFid = parentFolderRow.attr('id').split('-')[1];
      }
      targetSortable.children().each(function(){
        var row = $(this);
        // Add materials rows
        if(row.hasClass('materials-row-add')){
          var rowId = row.attr('id').split('-');
          rowId[3] = currentFid;
          rowId[4] = currentWeight;
          row.attr('id', rowId.join('-'));
        }
        // Item/Folder rows
        else {
          row.attr('display_weight', currentWeight);

          // Increment the weight for the next pair of rows
          currentWeight++;
        }
      });

      // Mark the table as having been updated
      sCourseSaveContentTableWeights(targetSortable, droppedRow);

    },
    change: function (e, ui){
      var isCurrentItemFolder = ui.item.hasClass('material-row-folder');
      var isDestinationStudentChoice = ui.placeholder.parents('.material-row-student-choice').length > 0;

      if (isCurrentItemFolder && isDestinationStudentChoice) {
        ui.placeholder.hide();
        return;
      }

      if(!allowRootLevelItems){
        // Don't allow non-folders to be dropped on the top level
        // Hide the placeholder if this is the case
        var queryParsed = getQueryParams(window.location.search);
        var topParentFid = queryParsed.f || 0;
        if(topParentFid == 0 && !isCurrentItemFolder && $(ui.placeholder).closest('table').attr('id') == 'folder-contents-table'){
          $(ui.placeholder).hide();
          return;
        }
      }

      $(ui.placeholder).show();
    },
    receive: function (e, ui){
      var isCurrentItemFolder = ui.item.hasClass('material-row-folder');
      var isDestinationStudentChoice = ui.item.parents('.material-row-student-choice').length > 0;

      // Don't allow folders & student choices to be dropped in student choices
      if (isCurrentItemFolder && isDestinationStudentChoice) {
        ui.sender.sortable('cancel');
        return;
      }

      // Don't allow non-folders to be dropped on the top level
      if($(this).parent().attr('id') == 'folder-contents-table'){
        if(!allowRootLevelItems){
          var queryParsed = getQueryParams(window.location.search);
          var topParentFid = queryParsed.f || 0;
          if(topParentFid == 0 && !ui.item.hasClass('material-row-folder')){
            ui.sender.sortable('cancel');
          }
        }
      }
      // Remove metadata if dropping into a subtree
      else {
        ui.item.find('.folder-alignment-wrapper').remove();
        ui.item.find('.folder-visibility').remove();

      }

      // Hide the 'empty' placeholder of the target
      // and show the 'empty' placeholder of the source if applicable
      var targetSortable = ui.item.parent();
      $('>.type-empty', targetSortable).hide();
      if(ui.sender && ui.sender.children().not('.materials-row-add').not('.type-empty').length == 0){
        $('>.type-empty', ui.sender).show();
      }
    },
  });
}

function sCourseMaterialsDetermineDestination(data, options, element) {
  // if no materials at all and a new one is added, redirect to the appropriate
  // path
  if (location.pathname != Drupal.settings.basePath + data.path)
    location.reload();
}

// Redirect the user to the editor for the newly created topic
// Can't do this the traditional way because of menu_set_active_item
function sCourseTopicGotoEditor(data, options, element) {
  location.href = Drupal.settings.basePath + data.js.setting.popups.originalPath;
  return false;
}

function setupAssignmentPaging(context){
  $('.gitem-pager').each(function(){
    var parent = $(this);
    var path = window.location.pathname.substring(1);
    var courseID = path.split('/')[1];
    $('a', this).unbind('click').click(function(e){
      e.preventDefault();
      periodID = parent.attr('id');
      var page = $(this).attr('href').split('page=');
      page = page[1];
      var count = $('.pager-count', parent).val();
      gradeItemType = parent.hasClass('assessment') ? 'assessment' : 'grade-item';
      parent.hide();
      parent.after('<img src="/sites/all/themes/schoology_theme/images/ajax-loader.gif" class="loader" alt="' + Drupal.t('Loading') + '" />');
      var baseURL = '/course/' + courseID + '/assignment_page/' + periodID + '/' + gradeItemType;
      if(parent.parents('.past-assignments-grading-period').length > 0){
        baseURL += '/past';
      }
      $.ajax({
          url: baseURL + '?page=' + page + '&count=' + count,
          dataType: 'json',
          type: 'GET',
          success: function(response, status){
            var liContext = parent.parents('li:first');
            $('ul:first', liContext).empty();
              var responseHtml = $(response.html);
            $('ul:first', liContext).append(responseHtml);
            parent.siblings('.loader').remove();
            parent.replaceWith(response.pager);
            setTimeout(function(){ setupAssignmentPaging(context); }, 500);
            Drupal.attachBehaviors(document);
          }
      });
    });
  });
}

/**
 * It is important, especially in the course context to track viewing on inline content like embeds - this function simply fires off a request to do so
 */
function sCourseTrackGenericPostView(link){
  var nid = link.attr('id').split('-').pop();
  var realmId = sCommonGetSetting('s_realm_info', 'csm_realm_id');
  if(!realmId){
    realmId = Drupal.settings.s_realm_info.realm_id;
  }
  var action = '/' + Drupal.settings.s_realm_info.realm + '/' + realmId  + '/materials/document/' + nid;
  var ajaxOpts = {
    url : '/stats/manual-tracker/trackPageView',
    type : 'POST',
    data : {'action_url' : action}
  };

  if(!link.hasClass('embed-cover')) {
    /**
     * the backside of only trigger a link after a successful request is for targeted links.
     * targeted links that are automatically triggered out of direct access usually are treated as a pop-up behaviour.
     *
     * Those are the expected results for an anchor tab with `target="_blank"`
     * If you click it, it should open in a new tab.
     * If you click it and the JS trigger action opens a link, it should open in a new tab.
     * If you click it and the JS trigger action does something and then open a link, it will behave as a pop-up (and may or may not be blocked by browsers)
     * If you click it and the JS trigger action does something and then the link is triggered afterwards (like a success from an ajax request), this will surely be blocked by pop-up blocker.
     *
     * The latter is the behavior we're having at this moment with actual changes
     */
    ajaxOpts.success = function () {
      link[0].click();
    };
  }

  $.ajaxSecure(ajaxOpts);
}

var sCourseSaveContentTableWeightsTimeout = null;
function sCourseSaveContentTableWeights(tbodyElement, rowElement){
  // Mark the element as having been updated
  rowElement.addClass('ui-sortable-item-changed');
  tbodyElement.addClass('ui-sortable-changed');

  // Fire off the saving functionality 5 seconds after the last reorder
  sCourseSaveContentTableWeightsTimeout && clearTimeout(sCourseSaveContentTableWeightsTimeout);
  sCourseSaveContentTableWeightsTimeout = setTimeout(sCourseSaveContentTableWeightsTimeoutHelper, 2000);

  var pageTitle = $('#center-top h2.page-title');
  if(!$('#folder-reorder-save-loader').length){
    $('body').append('<div id="folder-reorder-save-loader"><span>' + Drupal.t('Saving...') + '</span></div>');
  }
}

function sCourseSaveContentTableWeightsTimeoutHelper(){
  // Get all affected tables
  var droppedRow = $('#course-profile-materials .ui-sortable.ui-sortable-changed .ui-sortable-item-changed').removeClass('ui-sortable-item-changed');
  var toSave = $('#course-profile-materials .ui-sortable.ui-sortable-changed').removeClass('ui-sortable-changed');

  // get the dropped row containing an item
  var droppedRowId = droppedRow.attr('id');
  var droppedItemId = droppedRowId.search(/^n-[\d]+$/) === 0 ? droppedRowId : '';

  // If for some reason we get here and nothing has changed, don't do anything
  if(!toSave.length){
    return;
  }

  // Get top level parent folder
  var queryParsed = getQueryParams(window.location.search);
  var topParentFid = queryParsed.f || 0;

  // Collect the child items for each affected folder
  var updates = {};
  toSave.each(function(){
    var tbodyElement = $(this);
    var parentFid = topParentFid;
    var parentFolderRow = tbodyElement.closest('.material-row-folder');
    if(parentFolderRow.length){
      parentFid = parentFolderRow.attr('id').split('-')[1];
    }
    updates[parentFid] = {};
    tbodyElement.children().not('.materials-row-add').not('reorder-target-placeholder').not('.type-empty').each(function(){
      var row = $(this);
      updates[parentFid][row.attr('id')] = row.attr('display_weight');
    });
  });

  // Send to server
  var path = window.location.pathname.substring(1);
  var courseID = path.split('/')[1];
  $.ajaxSecure({
    url : '/course/' + courseID + '/materials/reorder',
    data: {updates: updates, root_fid: topParentFid, dropped_item_id: droppedItemId},
    type: 'POST',
    success: function(){
      $('#folder-reorder-save-loader').remove();
    },
    error: function(){
      $('#folder-reorder-save-loader').remove();
    }
  });
}

/**
 * Check whether the current course materials listing is the view without the materials index
 * The "no index" view allows materials items to be placed in the root level of the materials
 *
 * @return bool
 */
function sCourseMaterialsDisplayIsWithoutIndex(){
  var displayMode = sCommonGetSetting('s_course', 'display_mode');
  return displayMode && displayMode == sCommonGetSetting('s_course', 'display_mode_without_index');
}
;(function () {
  /**
   * Prevent this from being declared multiple times
   */
  if (window._initPendo) {
    return;
  }

  /**
   * Defines a method on `window` to initialize the Pendo.io application
   * @see https://app.pendo.io/admin/settings
   * @param {Object} visitor A subset of the user object
   * @param {Object} account Some school info
   * @param {String} apiKey The provided API key
   */
  window._initPendo = function(visitor, account, apiKey) {
    // Prevent pendo from being initialized multiple times
    if (window._pendoInitialized) {
      return;
    }

    // Pendo engine loading
    (function(p,e,n,d,o){var v,w,x,y,z;o=p[d]=p[d]||{};o._q=[];
    v=['initialize','identify','updateOptions','pageLoad'];for(w=0,x=v.length;w<x;++w)(function(m){
    o[m]=o[m]||function(){o._q[m===v[0]?'unshift':'push']([m].concat([].slice.call(arguments,0)));};})(v[w]);
    y=e.createElement(n);y.async=!0;y.src='https://ustats-cdn.schoology.com/agent/static/'+apiKey+'/pendo.js';
    z=e.getElementsByTagName(n)[0];z.parentNode.insertBefore(y,z);})(window,document,'script','pendo');

    // Call this whenever information about your visitors becomes available
    // Please use Strings, Numbers, or Bools for value types.
    pendo.initialize({
      apiKey: apiKey,
      visitor: visitor,
      account: account
    });

    // Prevent initializing pendo multiple times
    // This could occur from AJAX popups
    window._pendoInitialized = true;
  }
})();
;var quickInstallAutoLaunchClicked = false;

Drupal.behaviors.sAppLauncher = function(context) {
  Drupal.settings.s_app = Drupal.settings.s_app || {};
  
  if(!quickInstallAutoLaunchClicked && typeof Drupal.settings.s_app != 'undefined'){
    if(Drupal.settings.s_app.auto_launch_quick_install){
      $('.app-quick-installer-popup').click();
      quickInstallAutoLaunchClicked = true;
    }
  }
  
  $("#schoology-app-loader:not(.sAppLauncher-processed)", context).addClass('sAppLauncher-processed').each(function(){
    if(Drupal.settings.s_app.launcher){
      var params = sAppLauncherGetParams({type: 'standard', isImport: false, url: location.href});
      var launchKey = params.appNid + '-' + params.realm +'-' + params.realmID;
      if(Drupal.settings.s_app.launcher.hasOwnProperty(launchKey)) {
        var contentWrapper = $('#content-wrapper');
        var csmSectionToggle = $('#csm-section-toggle');
        var launchSettings = Drupal.settings.s_app.launcher[launchKey];
        var output = Drupal.theme('sAppContainer', launchSettings.type, launchSettings.url, launchSettings.cookie_required,
          csmSectionToggle.length ? csmSectionToggle.html() : '');
        contentWrapper.html(output);
        sAttachBehaviors(['sAppLauncher'], contentWrapper);

        sAppRegisterChannelListenerForUnsavedChanges(launchSettings.app_origin);
      }
    }
    $(this).remove();
  });
  
  $("#schoology-app-container:not(.sAppLauncher-processed)", context).addClass('sAppLauncher-processed').each(function(){
    // Resize the iframe that contains the app so it takes up the maximum height remaining in the viewport affter
    // taking into account the header (#header) and the breadcrumbs area (#center-top)
    var appWindowObj = $(this);
    $(window).resize(function() {
      var new_height = $(this).height();
      $('#header, #center-top:visible').each(function() {
        new_height -= $(this).outerHeight();
      });
      appWindowObj.height(new_height);
    }).trigger('resize');
    
    //hide the dropdown for courses, groups, and resources if the app iframe is clicked
    var bound = false;
    $('.primary-activities .clickable').each(function(){
      $(this).click(function(){
        if(!bound){
          var iframeMouseOver = false
          if($.browser.msie && $.browser.version.charAt(0) == 8){
            document.onfocusout = function(){ //need to use document.onfocusout for IE8
              if(iframeMouseOver){
                $('.activities-dropdown-wrapper').hide();
                bound = false;
              }
            };
          }
          else{
            $(window).bind('blur.sAppLauncher', function(){
              if(iframeMouseOver){
                $('.activities-dropdown-wrapper').hide();
                $(window).unbind('blur.sAppLauncher');
                bound = false;
              }
            });
          }
            
          appWindowObj.bind('mouseover',function(){
            iframeMouseOver = true;
          });
          appWindowObj.bind('mouseout',function(){
            iframeMouseOver = false;
          });
        }
        bound = true;
      });
    });
    
    // allow users to launch manaually if auto-launch fails (popup blocker)
    $(".s-js-launch-button", appWindowObj).bind('click', function(e){
      e.preventDefault();
      if($(this).hasClass('disabled')) {
        return;
      }
      var newWin = sCommonOpenNewWindow($(this).attr('href'), {name: 'schoology-app'});
      if(newWin !== false) {
        $(this).addClass('disabled');
        $(this).prev('.app-launch-message').html(Drupal.t('Your app has been launched in a new window.'));
        newWin.focus();
      }
    });
    $('.s-js-launch-button', appWindowObj).trigger('click');
  });

  /**
   * s_tinymce insert resource app content form
   */
  $('#s-js-tinymce-resources-insert-form-wrapper:not(.sTinymceResourcesInsert-processed)', context)
    .addClass('sTinymceResourcesInsert-processed').each(function()
    {
      var contentEmbedForm = $('#s-tinymce-resources-insert-form', $(this));
      var appNid = parseInt( $('#edit-app-nid', contentEmbedForm).val() );
      var appType = $('#edit-app-type', contentEmbedForm).val();
      var realm = $('#edit-realm', contentEmbedForm).val();
      var realmId = parseInt( $('#edit-realm-id', contentEmbedForm).val() );
      var folderId = parseInt( $('#edit-folder-id', contentEmbedForm).val() );
      var fWeight = parseInt( $('#edit-fweight', contentEmbedForm).val() );

      var app = {};
      app['type'] = appType;
      app['isRTE'] = true;
      if(appType == 'resources') {
        app['url'] = '/resources/apps/'+ appNid +'/run';
      }
      else if(appType == 'lti') {
        app['url'] = '/apps/lti/'+ appNid +'/run/'+ realm +'/'+ realmId + '?f=' + folderId + '&fweight=' + fWeight;
      }
      // not supported?
      else {
        return;
      }

      sAppLauncher($('#s-js-resources-app-container', contentEmbedForm), app);
  });
}

Drupal.theme.prototype.sAppContainer = function(launchType, launchUrl, cookieRequired, csm_toggle) {
  var template = '';
  
  if(cookieRequired) {
    template += '<div class="cookie-warning">';
    template += '<p class="app-launch-message">'+ Drupal.t('This app must be launched by clicking on its link on the left menu.') +'</p>';
    template += '</div>';
    return template;
  }
  
  if(launchType == 2) {
    template += '<div id="schoology-app-container" align="center">';
    template += '<p class="app-launch-message">'+ Drupal.t('We attempted to launch your app in a new window, but a popup blocker is preventing it from opening. Please disable popup blockers for this site.') +'</p>';
    template += '<a class="link-btn s-js-launch-button" href="'+ launchUrl +'">'+ Drupal.t('Launch App') +'</a>';
    template += '</div>';
  }
  else {
    if(csm_toggle){
      template += '<div id="schoology-csm_toggle" align="left">';
      template += '<p>'+ csm_toggle +'</p>';
      template += '</div>';
    }
    template += '<iframe id="schoology-app-container" frameborder="0" width="100%" height="800" src="'+ launchUrl +'" name="schoology-app-container"></iframe>';
  }
  
  return template;
};

function sAppLauncher(target, app) {
  if(!Drupal.settings.s_app.launcher) {
    Drupal.settings.s_app.launcher = {};
  }
  var params = sAppLauncherGetParams(app);
  var launchKey = params.appNid + '-' + params.realm +'-' + params.realmID;
  
  function renderApp(launchSettings) {
    var url = launchSettings.url;

    if (url && $.isPlainObject(app.params)) {
      url += (url.indexOf('?') === -1 ? '?' : '&') + $.param(app.params);
    }

    var output = Drupal.theme('sAppContainer', launchSettings.type, url, launchSettings.cookie_required);
    target.html(output);
    sAttachBehaviors(['sAppLauncher'], target);
  }
  
  if(Drupal.settings.s_app.launcher.hasOwnProperty(launchKey)) {
    renderApp( Drupal.settings.s_app.launcher[launchKey] );
    return;
  }
  
  sToggleActiveLoader('sAppLauncher', target);
  $.getJSON(params.settingsURI, function(data) {
    sToggleActiveLoader('sAppLauncher');
    
    Drupal.settings.s_app.launcher[launchKey] = data.body;
    renderApp( Drupal.settings.s_app.launcher[launchKey] );
  });
}

function sAppLauncherGetParams(app) {
  var q_params = {
    import_view: app.isImport ? 1 : 0
  };
  var url = '';
  var appNid = 0;
  var appRealm = '';
  var appRealmID = 0;
  var qParams = {};
  
  function parse_str(q_string, q_params) {
    if(q_string != '') {
      var q_string = q_string.split('&');
      for(i = 0; i < q_string.length; i++) {
        var key_val = q_string[i].split('=');
        q_params[ key_val[0] ] = key_val[1];
      }
    }
  }
  
  if(app.type == 'resources') {
    var parsed_url = app.url.match(/\/([0-9]+)\/run(\?)?(.*)/);
    appNid = parsed_url[1];
    appRealm = 'user';
    appRealmID = Drupal.settings.s_common.user.uid;
    url += appNid + '/' + app.type;
    parse_str(parsed_url[3], q_params);
  }
  else if(app.type == 'standard' || app.type == 'lti') {
    if(app.url.indexOf('/apps/school_apps/') != -1) {
      var parsed_url = app.url.match(/\/apps\/school_apps\/([0-9]+)\/configure(\?)?(.*)/);
      appNid = parsed_url[1];
      appRealm = 'school';
      appRealmID = Drupal.settings.s_common.user.school_nid;
    }
    else {
      var parsed_url = app.url.match(/\/([0-9]+)\/run\/([a-z]+)\/([0-9]+)(\?)?(.*)/);
      appNid = parsed_url[1];
      appRealm = parsed_url[2];
      appRealmID = parsed_url[3];
      qParams = getQueryParams(app.url);
    }
    url += appNid + '/' + app.type + '/' + appRealm + '/' + appRealmID;
    if(typeof app.isRTE != 'undefined' && app.isRTE == true){
      url += '&from=rte';
      if(qParams && typeof qParams.f != 'undefined') {
        url += '&f=' + String(qParams.f);
      }

      if(qParams && typeof qParams.fweight != 'undefined') {
        url += '&fweight=' + String(qParams.fweight);
      }
    }
  }
  
  if(url == '') {
    return false;
  }
  
  // we need to preserve the query strings for resources apps (import view, dropbox ..etc)
  var url_params = [];
  if(app.type == 'resources') {
    $.each(q_params, function(key, value) {
      url_params.push(key + "=" + encodeURIComponent(value));
    });
    url += '?' + url_params.join('&');
  }
  url = '/iapi/app/launcher/' + url;
  
  return {
    appNid: appNid,
    realm: appRealm,
    realmID: appRealmID,
    settingsURI: url
  };
}

function sAppLauncherClearCache(appNid) {
  // clear cached launch data since we store cookie preload attenpts in session
  for(var appKey in Drupal.settings.s_app.launcher) {
    if(appKey.split('-')[0] == appNid) {
      delete Drupal.settings.s_app.launcher[appKey];
      break;
    }
  }
}

/**
 * Register an "are you sure you want to leave" if there are unsaved changes
 * we want to make sure that the frame as has loaded before registering the app
 *
 * Sample usage of this behavior in an app:
 * ```
     <script src="https://app.schoology.com/sites/all/misc/jschannel.js"></script>
     <script src="https://app.schoology.com/sites/all/misc/schoology_api.js"></script>
     <script type="text/javascript">
       var schoologyApi = SchoologyApi.create({
            version: 'v1',
            context: 'app'
          });
       schoologyApi.setHasUnsavedChanges(true);
     </script>
 * ```
 * Note that the app should also register its own onbeforeunload for when the app
 * is opened outside of an iframe
 */
function sAppRegisterChannelListenerForUnsavedChanges(app_origin) {
  sAppIframeLoadingAppUrl(function() {
    var app = SchoologyApp.register('schoology-app-container', app_origin, 'app');
    app.setHasUnsavedChanges(function(event, params){
      var hasUnsavedChanges = params.hasOwnProperty('hasUnsavedChanges') && params.hasUnsavedChanges;
      if (hasUnsavedChanges) {
        window.onbeforeunload = function (event) {
          // Based on https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload, only IE shows a custom
          // message. All other browser use generic text.
          event.returnValue = Drupal.t('You have not saved your work. Are you sure you want to leave this page?');
        };
      } else {
        window.onbeforeunload = null;
      }
    });
  });
}

/**
 * Calls the given callback once the app iframe is loading the actual app URL
 * (as opposed to the local SAML initialization endpoints). This is helpful with
 * the postMessage API since a specific origin is required when building the messaging channel.
 * Initialization will otherwise fail if it starts and the iframe still points to
 * schoology's own SAML iniialization URLs.
 *
 * - App Launch
 * - IFrame loads app.schoology.com/apps/login/saml/initial
 * - That page redirects to the actual app URL (e.g. www.example.com/app)
 *      <-- This is when we want JSChannel to be initialized
 * - Browser loads www.example.com/app
 *
 * @param {func} callback
 */
function sAppIframeLoadingAppUrl(callback) {
  // While the iframe src is still on the same domain, the app is still going
  // through the login workflow. Once the iframe src points to a different domain,
  // the browser will throw a DOMException since it blocks accessing cross-origin frames.
  // At that point, we know that the app has begun to load and we can now execute the callback
  try {
    // This will succeed if it's still logging in
    // and throw an exception if it's cross domain
    var iframe = document.getElementById('schoology-app-container');
    var iframeSrc = iframe.contentWindow.location.href;
    window.setTimeout(function() { sAppIframeLoadingAppUrl(callback) }, 1000);
  } catch (e) {
    callback();
  }
}
;Drupal.behaviors.sAppMenu = function(context) {

  // Launch the cookie preload popup as soon as an app is launched
  $("#menu-s-apps-list .app-link:not(.sAppMenu-processed), .resources-app-list .s-js-app-launch.resources-app-title:not(.sAppMenu-processed)", context).addClass('sAppMenu-processed').each(function(){
    var link = $(this);
    var isResouceApp = link.hasClass('resources-app-title');
    
    // This needs to be bound by a user's click behavior; otherwise,
    // the popup will be blocked by the browser
    link.click(function(e){
      var appNid, appUrl, cookiePreloadUrl;

      if(!isResouceApp) {
        appNid = link.parents('.app-link-wrapper').attr('id').split('-')[2];
        appUrl = link.attr('href');
      }
      else {
        appNid = link.parents('.s-app-resource-app').attr('id').split('-')[1];
        appUrl = link.attr('href');
      }

      cookiePreloadUrl = sCommonGetSetting('s_app', 'cookie_preload_urls', appNid);
      if(cookiePreloadUrl) {
        // Prevent the app from launching immediately
        e.preventDefault();
        if(isResouceApp) {
          // for resource apps, also prevent other click handlers before running cookie preloader
          e.stopImmediatePropagation();
        }

        sAppMenuCookiePreloadRun(appNid, cookiePreloadUrl, function(){
          if(!isResouceApp) {
            window.location = appUrl;
          }
          else {
            // clear cached launch data since we store cookie preload attempts in session
            sAppLauncherClearCache(appNid);
            sAppMenuCookiePreloadDelete(appNid);
            // now trigger app click since the cookie preloader is done
            link.trigger('click.s-js-library-ajax-links');
          }
        });
      }
    });
  });
}

function sAppMenuCookiePreloadRun(appNid, cookiePreloadUrl, afterPreloadCallback) {
  // Open the cookie preload window
  window.open(cookiePreloadUrl,'cookiepreloader','width=100,height=100,toolbar=0,menubar=0,location=0,status=0,scrollbars=0,resizable=0,left=0,top=0');

  // Make a synchronous call to mark this app's cookies as loaded.
  // If the app loads before this call is made, it might end up in a browser loop.
  $.ajax({
    url: '/apps/' + appNid + '/cookies_loaded',
    async: false
  });

  // After a short moment to allow the popup to load, continue launching the app
  setTimeout(afterPreloadCallback, 800);
}

function sAppMenuCookiePreloadSet(data) {
  Drupal.settings.s_app = Drupal.settings.s_app || {};
  Drupal.settings.s_app.cookie_preload_urls = Drupal.settings.s_app.cookie_preload_urls || {};
  for(var appKey in data) {
    Drupal.settings.s_app.cookie_preload_urls[appKey] = data[appKey];
  }
}

function sAppMenuCookiePreloadDelete(appNid) {
  delete Drupal.settings.s_app.cookie_preload_urls[appNid];
};/*
 * jQuery Form Plugin
 * version: 2.25 (08-APR-2009)
 * @requires jQuery v1.2.2 or later
 * @note This has been modified for ajax.module
 * Examples and documentation at: http://malsup.com/jquery/form/
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
eval(function(p,a,c,k,e,r){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}(';(5($){$.B.1s=5(u){2(!4.G){R(\'1b: 2M 9 2N - 2O 2P 1t\');6 4}2(S u==\'5\')u={T:u};3 v=4.14(\'1c\')||1d.2Q.2R;v=(v.2S(/^([^#]+)/)||[])[1];v=v||\'\';u=$.1n({1e:v,H:4.14(\'1u\')||\'1Q\'},u||{});3 w={};4.L(\'C-1R-1S\',[4,u,w]);2(w.1T){R(\'1b: 9 1U 1o C-1R-1S L\');6 4}2(u.1v&&u.1v(4,u)===I){R(\'1b: 9 1f 1o 1v 1V\');6 4}3 a=4.1w(u.2T);2(u.J){u.O=u.J;K(3 n 1x u.J){2(u.J[n]2U 15){K(3 k 1x u.J[n])a.D({7:n,8:u.J[n][k]})}E a.D({7:n,8:u.J[n]})}}2(u.1y&&u.1y(a,4,u)===I){R(\'1b: 9 1f 1o 1y 1V\');6 4}4.L(\'C-9-1W\',[a,4,u,w]);2(w.1T){R(\'1b: 9 1U 1o C-9-1W L\');6 4}3 q=$.1z(a);2(u.H.2V()==\'1Q\'){u.1e+=(u.1e.2W(\'?\')>=0?\'&\':\'?\')+q;u.J=F}E u.J=q;3 x=4,V=[];2(u.2X)V.D(5(){x.1X()});2(u.2Y)V.D(5(){x.1Y()});2(!u.16&&u.17){3 y=u.T||5(){};V.D(5(a){$(u.17).2Z(a).P(y,1Z)})}E 2(u.T)V.D(u.T);u.T=5(a,b){K(3 i=0,M=V.G;i<M;i++)V[i].30(u,[a,b,x])};3 z=$(\'W:31\',4).18();3 A=I;K(3 j=0;j<z.G;j++)2(z[j])A=Q;2(u.20||A){2(u.21)$.32(u.21,1A);E 1A()}E $.33(u);4.L(\'C-9-34\',[4,u]);6 4;5 1A(){3 h=x[0];2($(\':W[7=9]\',h).G){35(\'36: 37 22 38 39 3a 3b "9".\');6}3 i=$.1n({},$.23,u);3 s=$.1n(Q,{},$.1n(Q,{},$.23),i);3 j=\'3c\'+(1B 3d().3e());3 k=$(\'<20 3f="\'+j+\'" 7="\'+j+\'" 24="25:26" />\');3 l=k[0];k.3g({3h:\'3i\',27:\'-28\',29:\'-28\'});3 m={1f:0,19:F,1g:F,3j:0,3k:\'n/a\',3l:5(){},2a:5(){},3m:5(){},3n:5(){4.1f=1;k.14(\'24\',\'25:26\')}};3 g=i.2b;2(g&&!$.1C++)$.1h.L("3o");2(g)$.1h.L("3p",[m,i]);2(s.2c&&s.2c(m,s)===I){s.2b&&$.1C--;6}2(m.1f)6;3 o=0;3 p=0;3 q=h.U;2(q){3 n=q.7;2(n&&!q.1i){u.O=u.O||{};u.O[n]=q.8;2(q.H=="X"){u.O[7+\'.x\']=h.Y;u.O[7+\'.y\']=h.Z}}}1j(5(){3 t=x.14(\'17\'),a=x.14(\'1c\');h.1k(\'17\',j);2(h.2d(\'1u\')!=\'2e\')h.1k(\'1u\',\'2e\');2(h.2d(\'1c\')!=i.1e)h.1k(\'1c\',i.1e);2(!u.3q){x.14({3r:\'2f/C-J\',3s:\'2f/C-J\'})}2(i.1D)1j(5(){p=Q;11()},i.1D);3 b=[];2g{2(u.O)K(3 n 1x u.O)b.D($(\'<W H="3t" 7="\'+n+\'" 8="\'+u.O[n]+\'" />\').2h(h)[0]);k.2h(\'1l\');l.2i?l.2i(\'2j\',11):l.3u(\'2k\',11,I);h.9()}3v{h.1k(\'1c\',a);t?h.1k(\'17\',t):x.3w(\'17\');$(b).2l()}},10);3 r=0;5 11(){2(o++)6;l.2m?l.2m(\'2j\',11):l.3x(\'2k\',11,I);3 c=Q;2g{2(p)3y\'1D\';3 d,N;N=l.2n?l.2n.2o:l.2p?l.2p:l.2o;2((N.1l==F||N.1l.2q==\'\')&&!r){r=1;o--;1j(11,2r);6}m.19=N.1l?N.1l.2q:F;m.1g=N.2s?N.2s:N;m.2a=5(a){3 b={\'3z-H\':i.16};6 b[a]};2(i.16==\'3A\'||i.16==\'3B\'){3 f=N.1E(\'1F\')[0];m.19=f?f.8:m.19}E 2(i.16==\'2t\'&&!m.1g&&m.19!=F){m.1g=2u(m.19)}d=$.3C(m,i.16)}3D(e){c=I;$.3E(i,m,\'2v\',e)}2(c){i.T(d,\'T\');2(g)$.1h.L("3F",[m,i])}2(g)$.1h.L("3G",[m,i]);2(g&&!--$.1C)$.1h.L("3H");2(i.2w)i.2w(m,c?\'T\':\'2v\');1j(5(){k.2l();m.1g=F},2r)};5 2u(s,a){2(1d.2x){a=1B 2x(\'3I.3J\');a.3K=\'I\';a.3L(s)}E a=(1B 3M()).3N(s,\'1G/2t\');6(a&&a.2y&&a.2y.1p!=\'3O\')?a:F}}};$.B.3P=5(c){6 4.2z().2A(\'9.C-1q\',5(){$(4).1s(c);6 I}).P(5(){$(":9,W:X",4).2A(\'2B.C-1q\',5(e){3 a=4.C;a.U=4;2(4.H==\'X\'){2(e.2C!=12){a.Y=e.2C;a.Z=e.3Q}E 2(S $.B.2D==\'5\'){3 b=$(4).2D();a.Y=e.2E-b.29;a.Z=e.2F-b.27}E{a.Y=e.2E-4.3R;a.Z=e.2F-4.3S}}1j(5(){a.U=a.Y=a.Z=F},10)})})};$.B.2z=5(){4.2G(\'9.C-1q\');6 4.P(5(){$(":9,W:X",4).2G(\'2B.C-1q\')})};$.B.1w=5(b){3 a=[];2(4.G==0)6 a;3 c=4[0];3 d=b?c.1E(\'*\'):c.22;2(!d)6 a;K(3 i=0,M=d.G;i<M;i++){3 e=d[i];3 n=e.7;2(!n)1H;2(b&&c.U&&e.H=="X"){2(!e.1i&&c.U==e)a.D({7:n+\'.x\',8:c.Y},{7:n+\'.y\',8:c.Z});1H}3 v=$.18(e,Q);2(v&&v.1r==15){K(3 j=0,2H=v.G;j<2H;j++)a.D({7:n,8:v[j]})}E 2(v!==F&&S v!=\'12\')a.D({7:n,8:v})}2(!b&&c.U){3 f=c.1E("W");K(3 i=0,M=f.G;i<M;i++){3 g=f[i];3 n=g.7;2(n&&!g.1i&&g.H=="X"&&c.U==g)a.D({7:n+\'.x\',8:c.Y},{7:n+\'.y\',8:c.Z})}}6 a};$.B.3T=5(a){6 $.1z(4.1w(a))};$.B.3U=5(b){3 a=[];4.P(5(){3 n=4.7;2(!n)6;3 v=$.18(4,b);2(v&&v.1r==15){K(3 i=0,M=v.G;i<M;i++)a.D({7:n,8:v[i]})}E 2(v!==F&&S v!=\'12\')a.D({7:4.7,8:v})});6 $.1z(a)};$.B.18=5(a){K(3 b=[],i=0,M=4.G;i<M;i++){3 c=4[i];3 v=$.18(c,a);2(v===F||S v==\'12\'||(v.1r==15&&!v.G))1H;v.1r==15?$.3V(b,v):b.D(v)}6 b};$.18=5(b,c){3 n=b.7,t=b.H,1a=b.1p.1I();2(S c==\'12\')c=Q;2(c&&(!n||b.1i||t==\'1m\'||t==\'3W\'||(t==\'1J\'||t==\'1K\')&&!b.1L||(t==\'9\'||t==\'X\')&&b.C&&b.C.U!=b||1a==\'13\'&&b.1M==-1))6 F;2(1a==\'13\'){3 d=b.1M;2(d<0)6 F;3 a=[],1N=b.3X;3 e=(t==\'13-2I\');3 f=(e?d+1:1N.G);K(3 i=(e?d:0);i<f;i++){3 g=1N[i];2(g.1t){3 v=g.8;2(!v)v=(g.1O&&g.1O[\'8\']&&!(g.1O[\'8\'].3Y))?g.1G:g.8;2(e)6 v;a.D(v)}}6 a}6 b.8};$.B.1Y=5(){6 4.P(5(){$(\'W,13,1F\',4).2J()})};$.B.2J=$.B.3Z=5(){6 4.P(5(){3 t=4.H,1a=4.1p.1I();2(t==\'1G\'||t==\'40\'||1a==\'1F\')4.8=\'\';E 2(t==\'1J\'||t==\'1K\')4.1L=I;E 2(1a==\'13\')4.1M=-1})};$.B.1X=5(){6 4.P(5(){2(S 4.1m==\'5\'||(S 4.1m==\'41\'&&!4.1m.42))4.1m()})};$.B.43=5(b){2(b==12)b=Q;6 4.P(5(){4.1i=!b})};$.B.2K=5(b){2(b==12)b=Q;6 4.P(5(){3 t=4.H;2(t==\'1J\'||t==\'1K\')4.1L=b;E 2(4.1p.1I()==\'2L\'){3 a=$(4).44(\'13\');2(b&&a[0]&&a[0].H==\'13-2I\'){a.45(\'2L\').2K(I)}4.1t=b}})};5 R(){2($.B.1s.46&&1d.1P&&1d.1P.R)1d.1P.R(\'[47.C] \'+15.48.49.4a(1Z,\'\'))}})(4b);',62,260,'||if|var|this|function|return|name|value|submit||||||||||||||||||||||||||||fn|form|push|else|null|length|type|false|data|for|trigger|max|doc|extraData|each|true|log|typeof|success|clk|callbacks|input|image|clk_x|clk_y||cb|undefined|select|attr|Array|dataType|target|a_fieldValue|responseText|tag|ajaxSubmit|action|window|url|aborted|responseXML|event|disabled|setTimeout|setAttribute|body|reset|extend|via|tagName|plugin|constructor|a_ajaxSubmit|selected|method|beforeSerialize|a_formToArray|in|beforeSubmit|param|fileUpload|new|active|timeout|getElementsByTagName|textarea|text|continue|toLowerCase|checkbox|radio|checked|selectedIndex|ops|attributes|console|GET|pre|serialize|veto|vetoed|callback|validate|a_resetForm|a_clearForm|arguments|iframe|closeKeepAlive|elements|ajaxSettings|src|about|blank|top|1000px|left|getResponseHeader|global|beforeSend|getAttribute|POST|multipart|try|appendTo|attachEvent|onload|load|remove|detachEvent|contentWindow|document|contentDocument|innerHTML|100|XMLDocument|xml|toXml|error|complete|ActiveXObject|documentElement|a_ajaxFormUnbind|bind|click|offsetX|offset|pageX|pageY|unbind|jmax|one|a_clearFields|a_selected|option|skipping|process|no|element|location|href|match|semantic|instanceof|toUpperCase|indexOf|resetForm|clearForm|html|apply|file|get|ajax|notify|alert|Error|Form|must|not|be|named|jqFormIO|Date|getTime|id|css|position|absolute|status|statusText|getAllResponseHeaders|setRequestHeader|abort|ajaxStart|ajaxSend|skipEncodingOverride|encoding|enctype|hidden|addEventListener|finally|removeAttr|removeEventListener|throw|content|json|script|httpData|catch|handleError|ajaxSuccess|ajaxComplete|ajaxStop|Microsoft|XMLDOM|async|loadXML|DOMParser|parseFromString|parsererror|a_ajaxForm|offsetY|offsetLeft|offsetTop|a_formSerialize|a_fieldSerialize|merge|button|options|specified|a_clearInputs|password|object|nodeType|a_enable|parent|find|debug|jquery|prototype|join|call|jQuery'.split('|'),0,{}));/**
 * Automatic ajax validation
 *
 * @see http://drupal.org/project/ajax
 * @see irc://freenode.net/#drupy
 * @depends Drupal 6
 * @author brendoncrawford
 * @note This file uses a 79 character width limit.
 * 
 *
 */

Drupal.Ajax = new Object;

Drupal.Ajax.plugins = {};

Drupal.Ajax.firstRun = false;

/**
 * Init function.
 * This is being executed by Drupal behaviours.
 * See bottom of script.
 * 
 * @param {HTMLElement} context
 * @return {Bool}
 */
Drupal.Ajax.init = function(context) {
  var f, s;
  if (f = $('.ajax-form:not(.AjaxProcessed)', context).addClass('AjaxProcessed')) {  
    if (!Drupal.Ajax.firstRun) {
      Drupal.Ajax.invoke('init');
      Drupal.Ajax.firstRun = true;
    }
    s = $('input[type="submit"]', f);
    s.click(function(e){
      var $submit = $(this);
      this.form.ajax_activator = $submit;
      //Allow us to handle pre-submit event by attach function callback to submit element
      var beforeSubmit = $submit.data('beforeSubmitHandler');
      if (typeof beforeSubmit === 'function') {
        beforeSubmit(e);
      }
      return true;
    });
    f.each(function(){
      this.ajax_activator = null;
      $(this).submit(function(){
        if (this.ajax_activator === null) {
          this.ajax_activator = $('.form-submit', this);
        }
        if (this.ajax_activator.hasClass('ajax-trigger')) {
          Drupal.Ajax.go($(this), this.ajax_activator);
          return false;
        }
        else {
          return true;
        }
      });
      return true;
    });
  }
  return true;
};

/**
 * Invokes plugins
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 */
Drupal.Ajax.invoke = function(hook, args) {
  var plugin, r, ret;
  ret = true;
  for (plugin in Drupal.Ajax.plugins) {
    r = Drupal.Ajax.plugins[plugin](hook, args);
    if (r === false) {
      ret = false;
    }
  }
  return ret;
};

/**
 * Handles submission
 * 
 * @param {Object} submitter_
 * @return {Bool}
 */
Drupal.Ajax.go = function(formObj, submitter) {
  var submitterVal, submitterName, extraData;
  Drupal.Ajax.invoke('submit', {submitter:submitter});
  submitterVal = submitter.val();
  submitterName = submitter.attr('name');
  extraData = {};
  extraData[submitterName] = submitterVal;
  extraData['drupal_ajax'] = '1';
  formObj.a_ajaxSubmit({
    extraData : extraData,
    beforeSubmit : function(data) {
      data[data.length] = {
        name : submitterName,
        value : submitterVal
      };
      data[data.length] = {
        name : 'drupal_ajax',
        value : '1'
      };
      return true;
    },
    dataType : 'json',
    error: function (XMLHttpRequest, textStatus, errorThrown) {
      window.alert(Drupal.t('ajax.module: An unknown error has occurred.'));
      // log the error
      $.post('/popups_error', {
        'error': textStatus,
        'status' : XMLHttpRequest.status,
        'response' : XMLHttpRequest.responseText,
        'error_type' : 'ajax',
      });
      if (window.console) {
        console.log('error', arguments);
      }
      return true;
    },
    success: function(data){
      submitter.val(submitterVal);
      Drupal.Ajax.response(submitter, formObj, data);
      return true;
    }
  });
  return false;
};

/**
 * Handles messaging
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 * @param {Object} data
 * @param {Object} options
 * @return {Bool}
 */
Drupal.Ajax.message = function(formObj, submitter, data, options) {
  var args; 
  data.local = {
    submitter : submitter,
    form : formObj
  };
  if (Drupal.Ajax.invoke('message', data)) {
    Drupal.Ajax.writeMessage(data.local.form, data.local.submitter, options);
    Drupal.Ajax.invoke('afterMessage', data);
  }
  return true;
};

/**
 * Writes message
 * 
 * @param {Object} formObj
 * @param {Object} submitter
 * @param {Object} options
 * @return {Bool}
 */
Drupal.Ajax.writeMessage = function(formObj, submitter, options) {
  var i, _i, thisItem, log, errBox, h, data;
  if (options.action === 'notify') {
    // Cleanups
    $('.messages, .ajax-preview', formObj).remove();
    $('input, textarea').removeClass('error status warning required');
    // Preview
    if (options.type === 'preview') {
      log = $('<div>').addClass('ajax-preview');
      log.html(options.messages);
      formObj.prepend(log);
    }
    // Status, Error, Message
    else {
      log = $('<ul>');
      errBox = $(".messages." + options.type, formObj[0])
      for (i = 0, _i = options.messages.length; i < _i; i++) {
        thisItem = $('#' + options.messages[i].id, formObj[0])
        thisItem.addClass(options.type);
        if (options.messages[i].required) {
          thisItem.addClass('required');
        }
        log.append('<li>' + options.messages[i].value + '</li>');
      }
      if (errBox.length === 0) {
        errBox = $("<div class='messages " + options.type + "'>");
        formObj.prepend(errBox);
      }
      errBox.html(log); 
    }
  }
  else if (options.action === 'clear') {
    $('.messages, .ajax-preview', formObj).remove();
  }
  return true;
};

/**
 * Updates message containers
 * 
 * @param {Object} updaters
 * @return {Bool}
 */
Drupal.Ajax.updater = function(updaters) {
  var i, _i, elm;
  for (i = 0, _i = updaters.length; i < _i; i++) {
    elm = $(updaters[i].selector);
    // HTML:IN
    if (updaters[i].type === 'html_in') {
      elm.html(updaters[i].value);
    }
    // HTML:OUT
    else if (updaters[i].type === 'html_out') {
      elm.replaceWith(updaters[i].value);
    }
    // FIELD
    else if (updaters[i].type === 'field') {
      elm.val(updaters[i].value);
    }
    // REMOVE
    else if(updaters[i].type === 'remove') {
      elm.remove();
    }
  }
  return true;
};

/**
 * Handles data response
 * 
 * @param {Object} submitter
 * @param {Object} formObj
 * @param {Object} data
 * @return {Bool}
 */
Drupal.Ajax.response = function(submitter, formObj, data){
  var newSubmitter;
  data.local = {
    submitter : submitter,
    form : formObj
  };
  /**
   * Failure
   */
  if (data.status === false) {
    Drupal.Ajax.updater(data.updaters);
    Drupal.Ajax.message(formObj, submitter, data, {
      action : 'notify',
      messages : data.messages_error,
      type : 'error'
    });
  }
  /**
   * Success
   */
  else {
    // Display preview
    if (data.preview !== null) {
      Drupal.Ajax.updater(data.updaters);
      Drupal.Ajax.message(formObj, submitter, data, {
        action : 'notify',
        messages : decodeURIComponent(data.preview),
        type : 'preview'
      });
    }
    // If no redirect, then simply show messages
    else if (data.redirect === null) {
      if (data.messages_status.length > 0) {
        Drupal.Ajax.message(formObj, submitter, data, {
          action : 'notify',
          messages : data.messages_status,
          type : 'status'
        });
      }
      if (data.messages_warning.length > 0) {
        Drupal.Ajax.message(formObj, submitter, data, {
          action : 'notify',
          messages : data.messages_warning,
          type : 'warning'
        });
      }
      if (data.messages_status.length === 0 &&
          data.messages_warning.length === 0) {
        Drupal.Ajax.message(formObj, submitter, data, {action:'clear'});
      }
    }
    // Redirect
    else {
      if (Drupal.Ajax.invoke('redirect', data)) {
        Drupal.Ajax.redirect( data.redirect );
      }
      else {
        Drupal.Ajax.updater(data.updaters);
        if (data.messages_status.length === 0 &&
            data.messages_warning.length === 0) {
          Drupal.Ajax.message(formObj, submitter, data, {action:'clear'});
        }
        else {
          Drupal.Ajax.message(formObj, submitter, data, {
            action : 'notify',
            messages : data.messages_status,
            type : 'status'
          });
        }
      }
    }
  }
  return true;
};


/**
 * Redirects to appropriate page
 * 
 * @todo
 *   Some of this functionality should possibly hapen on
 *   the server instead of client.
 * @param {String} url
 */
Drupal.Ajax.redirect = function(url) {
  window.location.href = url;
};

Drupal.behaviors.Ajax = Drupal.Ajax.init;



;